<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.FrontEnd.BinLifter.Intel</name></assembly>
<members>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.R">
<summary>
 Shortcut for Register type.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.UnknownReg">
<summary>
 Unknown Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K7">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K6">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K5">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K4">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K3">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K2">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K1">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.K0">
<summary>
 Opmask registers. For EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15H">
<summary>
 ZMM15H is the 8th 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15G">
<summary>
 ZMM15G is the 7th 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15F">
<summary>
 ZMM15F is the 6th 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15E">
<summary>
 ZMM15E is the 5th 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15D">
<summary>
 ZMM15D is the 4th 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15C">
<summary>
 ZMM15C is the 3rd 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15B">
<summary>
 ZMM15B is the 2nd 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15A">
<summary>
 ZMM15A is the 1st 64-bit chunk of ZMM15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14H">
<summary>
 ZMM14H is the 8th 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14G">
<summary>
 ZMM14G is the 7th 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14F">
<summary>
 ZMM14F is the 6th 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14E">
<summary>
 ZMM14E is the 5th 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14D">
<summary>
 ZMM14D is the 4th 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14C">
<summary>
 ZMM14C is the 3rd 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14B">
<summary>
 ZMM14B is the 2nd 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14A">
<summary>
 ZMM14A is the 1st 64-bit chunk of ZMM14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13H">
<summary>
 ZMM13H is the 8th 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13G">
<summary>
 ZMM13G is the 7th 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13F">
<summary>
 ZMM13F is the 6th 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13E">
<summary>
 ZMM13E is the 5th 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13D">
<summary>
 ZMM13D is the 4th 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13C">
<summary>
 ZMM13C is the 3rd 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13B">
<summary>
 ZMM13B is the 2nd 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13A">
<summary>
 ZMM13A is the 1st 64-bit chunk of ZMM13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12H">
<summary>
 ZMM12H is the 8th 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12G">
<summary>
 ZMM12G is the 7th 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12F">
<summary>
 ZMM12F is the 6th 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12E">
<summary>
 ZMM12E is the 5th 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12D">
<summary>
 ZMM12D is the 4th 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12C">
<summary>
 ZMM12C is the 3rd 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12B">
<summary>
 ZMM12B is the 2nd 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12A">
<summary>
 ZMM12A is the 1st 64-bit chunk of ZMM12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11H">
<summary>
 ZMM11H is the 8th 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11G">
<summary>
 ZMM11G is the 7th 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11F">
<summary>
 ZMM11F is the 6th 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11E">
<summary>
 ZMM11E is the 5th 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11D">
<summary>
 ZMM11D is the 4th 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11C">
<summary>
 ZMM11C is the 3rd 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11B">
<summary>
 ZMM11B is the 2nd 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11A">
<summary>
 ZMM11A is the 1st 64-bit chunk of ZMM11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10H">
<summary>
 ZMM10H is the 8th 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10G">
<summary>
 ZMM10G is the 7th 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10F">
<summary>
 ZMM10F is the 6th 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10E">
<summary>
 ZMM10E is the 5th 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10D">
<summary>
 ZMM10D is the 4th 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10C">
<summary>
 ZMM10C is the 3rd 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10B">
<summary>
 ZMM10B is the 2nd 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10A">
<summary>
 ZMM10A is the 1st 64-bit chunk of ZMM10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9H">
<summary>
 ZMM9H is the 8th 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9G">
<summary>
 ZMM9G is the 7th 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9F">
<summary>
 ZMM9F is the 6th 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9E">
<summary>
 ZMM9E is the 5th 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9D">
<summary>
 ZMM9D is the 4th 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9C">
<summary>
 ZMM9C is the 3rd 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9B">
<summary>
 ZMM9B is the 2nd 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9A">
<summary>
 ZMM9A is the 1st 64-bit chunk of ZMM9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8H">
<summary>
 ZMM8H is the 8th 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8G">
<summary>
 ZMM8G is the 7th 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8F">
<summary>
 ZMM8F is the 6th 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8E">
<summary>
 ZMM8E is the 5th 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8D">
<summary>
 ZMM8D is the 4th 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8C">
<summary>
 ZMM8C is the 3rd 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8B">
<summary>
 ZMM8B is the 2nd 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8A">
<summary>
 ZMM8A is the 1st 64-bit chunk of ZMM8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7H">
<summary>
 ZMM7H is the 8th 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7G">
<summary>
 ZMM7G is the 7th 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7F">
<summary>
 ZMM7F is the 6th 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7E">
<summary>
 ZMM7E is the 5th 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7D">
<summary>
 ZMM7D is the 4th 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7C">
<summary>
 ZMM7C is the 3rd 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7B">
<summary>
 ZMM7B is the 2nd 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7A">
<summary>
 ZMM7A is the 1st 64-bit chunk of ZMM7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6H">
<summary>
 ZMM6H is the 8th 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6G">
<summary>
 ZMM6G is the 7th 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6F">
<summary>
 ZMM6F is the 6th 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6E">
<summary>
 ZMM6E is the 5th 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6D">
<summary>
 ZMM6D is the 4th 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6C">
<summary>
 ZMM6C is the 3rd 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6B">
<summary>
 ZMM6B is the 2nd 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6A">
<summary>
 ZMM6A is the 1st 64-bit chunk of ZMM6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5H">
<summary>
 ZMM5H is the 8th 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5G">
<summary>
 ZMM5G is the 7th 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5F">
<summary>
 ZMM5F is the 6th 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5E">
<summary>
 ZMM5E is the 5th 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5D">
<summary>
 ZMM5D is the 4th 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5C">
<summary>
 ZMM5C is the 3rd 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5B">
<summary>
 ZMM5B is the 2nd 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5A">
<summary>
 ZMM5A is the 1st 64-bit chunk of ZMM5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4H">
<summary>
 ZMM4H is the 8th 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4G">
<summary>
 ZMM4G is the 7th 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4F">
<summary>
 ZMM4F is the 6th 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4E">
<summary>
 ZMM4E is the 5th 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4D">
<summary>
 ZMM4D is the 4th 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4C">
<summary>
 ZMM4C is the 3rd 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4B">
<summary>
 ZMM4B is the 2nd 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4A">
<summary>
 ZMM4A is the 1st 64-bit chunk of ZMM4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3H">
<summary>
 ZMM3H is the 8th 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3G">
<summary>
 ZMM3G is the 7th 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3F">
<summary>
 ZMM3F is the 6th 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3E">
<summary>
 ZMM3E is the 5th 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3D">
<summary>
 ZMM3D is the 4th 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3C">
<summary>
 ZMM3C is the 3rd 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3B">
<summary>
 ZMM3B is the 2nd 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3A">
<summary>
 ZMM3A is the 1st 64-bit chunk of ZMM3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2H">
<summary>
 ZMM2H is the 8th 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2G">
<summary>
 ZMM2G is the 7th 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2F">
<summary>
 ZMM2F is the 6th 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2E">
<summary>
 ZMM2E is the 5th 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2D">
<summary>
 ZMM2D is the 4th 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2C">
<summary>
 ZMM2C is the 3rd 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2B">
<summary>
 ZMM2B is the 2nd 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2A">
<summary>
 ZMM2A is the 1st 64-bit chunk of ZMM2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1H">
<summary>
 ZMM1H is the 8th 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1G">
<summary>
 ZMM1G is the 7th 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1F">
<summary>
 ZMM1F is the 6th 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1E">
<summary>
 ZMM1E is the 5th 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1D">
<summary>
 ZMM1D is the 4th 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1C">
<summary>
 ZMM1C is the 3rd 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1B">
<summary>
 ZMM1B is the 2nd 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1A">
<summary>
 ZMM1A is the 1st 64-bit chunk of ZMM1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0H">
<summary>
 ZMM0H is the 8th 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0G">
<summary>
 ZMM0G is the 7th 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0F">
<summary>
 ZMM0F is the 6th 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0E">
<summary>
 ZMM0E is the 5th 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0D">
<summary>
 ZMM0D is the 4th 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0C">
<summary>
 ZMM0C is the 3rd 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0B">
<summary>
 ZMM0B is the 2nd 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0A">
<summary>
 ZMM0A is the 1st 64-bit chunk of ZMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST7B">
<summary>
 ST Register (Higher 16bits ST7).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST7A">
<summary>
 ST Register (lower 64bits ST7).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST6B">
<summary>
 ST Register (Higher 16bits ST6).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST6A">
<summary>
 ST Register (lower 64bits ST6).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST5B">
<summary>
 ST Register (Higher 16bits ST5).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST5A">
<summary>
 ST Register (lower 64bits ST5).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST4B">
<summary>
 ST Register (Higher 16bits ST4).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST4A">
<summary>
 ST Register (lower 64bits ST4).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST3B">
<summary>
 ST Register (Higher 16bits ST3).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST3A">
<summary>
 ST Register (lower 64bits ST3).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST2B">
<summary>
 ST Register (Higher 16bits ST2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST2A">
<summary>
 ST Register (lower 64bits ST2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST1B">
<summary>
 ST Register (Higher 16bits ST1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST1A">
<summary>
 ST Register (lower 64bits ST1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST0B">
<summary>
 ST Register (Higher 16bits ST0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST0A">
<summary>
 ST Register (lower 64bits ST0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND3B">
<summary>
 BND Register (Higher 64bits BND3).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND3A">
<summary>
 BND Register (lower 64bits BND3).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND2B">
<summary>
 BND Register (Higher 64bits BND2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND2A">
<summary>
 BND Register (lower 64bits BND2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND1B">
<summary>
 BND Register (Higher 64bits BND1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND1A">
<summary>
 BND Register (lower 64bits BND1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND0B">
<summary>
 BND Register (Higher 64bits BND0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND0A">
<summary>
 BND Register (lower 64bits BND0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.PKRU">
<summary>
 Protection-key features register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CF">
<summary>
 Carry Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.PF">
<summary>
 Parity Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.AF">
<summary>
 Auxiliary Carry Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZF">
<summary>
 Zero Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SF">
<summary>
 Sign Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.TF">
<summary>
 Trap Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.IF">
<summary>
 Interrupt Enable Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DF">
<summary>
 Direction Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.OF">
<summary>
 Overflow Flag in EFLAGS Register
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND3">
<summary>
 BND registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND2">
<summary>
 BND registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND1">
<summary>
 BND registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BND0">
<summary>
 BND registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR7">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR6">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR3">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR2">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR1">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DR0">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CR8">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CR4">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CR3">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CR2">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CR0">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.GSBase">
<summary>
 ES.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSBase">
<summary>
 FS.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DSBase">
<summary>
 DS.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SSBase">
<summary>
 SS.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CSBase">
<summary>
 CS.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ESBase">
<summary>
 ES.base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.GS">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FS">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DS">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SS">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CS">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ES">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM15">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM14">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM13">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM12">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM11">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM10">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM9">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM8">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM7">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM6">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM5">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM4">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM3">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM2">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM1">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ZMM0">
<summary>
 512-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM15">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM14">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM13">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM12">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM11">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM10">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM9">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM8">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM7">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM6">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM5">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM4">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM3">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM2">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM1">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.YMM0">
<summary>
 256-bit vector registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM15">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM14">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM13">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM12">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM11">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM10">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM9">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM8">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM7">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM6">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM5">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM4">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM3">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM2">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM1">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.XMM0">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM7">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM6">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM5">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM4">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM3">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM2">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM1">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MM0">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MXCSRMASK">
<summary>
 MXCSR_MASK.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.MXCSR">
<summary>
 MXCSR Control and Status Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSWC3">
<summary>
 x87 FPU Status Word C flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSWC2">
<summary>
 x87 FPU Status Word C flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSWC1">
<summary>
 x87 FPU Status Word C flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSWC0">
<summary>
 x87 FPU Status Word C flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW7">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW6">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW5">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW4">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW3">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW2">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW1">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW0">
<summary>
 x87 FPU Tag word section.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTOP">
<summary>
 x87 FPU Top indicator bits of Status Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FDS">
<summary>
 x87 FPU Data Pointer Selector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FDP">
<summary>
 x87 FPU Data Pointer Offset.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FCS">
<summary>
 x87 FPU Instruction Pointer Selector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FIP">
<summary>
 x87 FPU Instruction Pointer Offset.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FOP">
<summary>
 x87 FPU Opcode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FTW">
<summary>
 x87 FPU Tag Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FSW">
<summary>
 x87 FPU Status Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.FCW">
<summary>
 C87 FPU Control Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST7">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST6">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST5">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST4">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST3">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST2">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST1">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ST0">
<summary>
 x87 FPU registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RIP">
<summary>
 Instruction Pointer (64Bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EIP">
<summary>
 Instruction Pointer (32Bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DIL">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SIL">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BPL">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SPL">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R15L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R14L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R13L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R12L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R11L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R10L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R9L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R8L">
<summary>
 General-Purpose Registers for 64bit Mode (Byte Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BH">
<summary>
 General-Purpose Registers (Higher 8bits BX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DH">
<summary>
 General-Purpose Registers (Higher 8bits DX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CH">
<summary>
 General-Purpose Registers (Higher 8bits CX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.AH">
<summary>
 General-Purpose Registers (Higher 8bits AX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BL">
<summary>
 General-Purpose Registers (lower 8bits BX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DL">
<summary>
 General-Purpose Registers (lower 8bits DX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CL">
<summary>
 General-Purpose Registers (lower 8bits CX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.AL">
<summary>
 General-Purpose Registers (lower 8bits AX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R15W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R14W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R13W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R12W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R11W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R10W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R9W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R8W">
<summary>
 General-Purpose Registers for 64bit Mode (Word Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DI">
<summary>
 General-Purpose Registers (lower 16bits EDI).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SI">
<summary>
 General-Purpose Registers (lower 16bits ESI).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BP">
<summary>
 General-Purpose Registers (lower 16bits EBP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.SP">
<summary>
 General-Purpose Registers (lower 16bits ESP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.BX">
<summary>
 General-Purpose Registers (lower 16bits EBX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.DX">
<summary>
 General-Purpose Registers (lower 16bits EDX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.CX">
<summary>
 General-Purpose Registers (lower 16bits ECX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.AX">
<summary>
 General-Purpose Registers (lower 16bits EAX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R15D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R14D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R13D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R12D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R11D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R10D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R9D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R8D">
<summary>
 General-Purpose Registers for 64bit Mode (Doubleword Register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EDI">
<summary>
 Pointer to data in the segment pointed to by the ES register (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ESI">
<summary>
 Pointer to data in the segment pointed to by the DS register (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EBP">
<summary>
 Pointer to data on the stack (in the SS segment) (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ESP">
<summary>
 Stack pointer (in the SS segment) (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EBX">
<summary>
 Pointer to data in the DS segment (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EDX">
<summary>
 I/O pointer (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.ECX">
<summary>
 TCounter for string and loop operations (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.EAX">
<summary>
 Accumulator for operands and results data (32bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R15">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R14">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R13">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R12">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R11">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R10">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R9">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.R8">
<summary>
 General-Purpose Registers for 64bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RDI">
<summary>
 Pointer to data in the segment pointed to by the ES register (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RSI">
<summary>
 Pointer to data in the segment pointed to by the DS register (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RBP">
<summary>
 Pointer to data on the stack (in the SS segment) (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RSP">
<summary>
 Stack pointer (in the SS segment) (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RBX">
<summary>
 Pointer to data in the DS segment (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RDX">
<summary>
 I/O pointer (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RCX">
<summary>
 TCounter for string and loop operations (64bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Register.RAX">
<summary>
 Accumulator for operands and results data (64bit).
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Register">
 <summary>
 Registers for x86 (and x86-64).<para/>

 Internally, a Register is represented with an integer (we use only 22 bits).
 The most significant 10 bits (from 12th to 21th bits) represent the size of
 the register. The next 4 bits (from 8th to 11th bits) represent the register
 kind, and the reset of 8 bits are used to represent a register ID. There are
 currently 13 kinds of registers including GP, FPU, MMX, etc. <para/>
 <code>
 21 ... 13 12 11 10 09 08 07 06 05 04 03 02 01 00 (bit position)
 +------------+----------+----------------------+
 |  Size      | Kind     |  Register ID.        |
 +------------+----------+----------------------+
 </code>
 </summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.InvalOP">
<summary>
 Invalid Opcode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XTEST">
<summary>
 Test If In Transactional Execution.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSETBV">
<summary>
 Set Extended Control Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVES64">
<summary>
 Save processor supervisor-mode extended states to memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVES">
<summary>
 Save processor supervisor-mode extended states to memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVEOPT">
<summary>
 Save Processor Extended States Optimized.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVEC64">
<summary>
 Save processor extended states with compaction to memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVEC">
<summary>
 Save processor extended states with compaction to memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XSAVE">
<summary>
 Save Processor Extended States.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XRSTORS64">
<summary>
 Restore processor supervisor-mode extended states from memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XRSTORS">
<summary>
 Restore processor supervisor-mode extended states from memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XRSTOR">
<summary>
 Restore Processor Extended States.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XRELEASE">
<summary>
 Prefix hint to the end of an HLE transaction region.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XORPS">
<summary>
 Bitwise Logical XOR for Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XORPD">
<summary>
 Bitwise Logical XOR for Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XOR">
<summary>
 Logical Exclusive OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XLATB">
<summary>
 Table Look-up Translation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XLAT">
<summary>
 Table lookup translation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XGETBV">
<summary>
 Value of Extended Control Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XEND">
<summary>
 Transactional End.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XCHG">
<summary>
 Exchange Register/Memory with Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XBEGIN">
<summary>
 Transactional Begin.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XADD">
<summary>
 Exchange and Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XACQUIRE">
<summary>
 Prefix hint to the beginning of an HLE transaction region.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.XABORT">
<summary>
 Transactional Abort.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRUSSQ">
<summary>
 Write to a user mode shadow stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRUSSD">
<summary>
 Write to a user mode shadow stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRSSQ">
<summary>
 Write to a shadow stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRSSD">
<summary>
 Write to a shadow stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRPKRU">
<summary>
 Write Data to User Page Key Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRMSR">
<summary>
 Write to Model Specific Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRGSBASE">
<summary>
 Write GS Segment Base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WRFSBASE">
<summary>
 Write FS Segment Base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WBINVD">
<summary>
 Write Back and Invalidate Cache.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.WAIT">
<summary>
 Wait.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VZEROUPPER">
<summary>
 Zero Upper Bits of YMM Registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VXORPS">
<summary>
 Bitwise Logical XOR for Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VXORPD">
<summary>
 Bitwise Logical XOR for Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUNPCKLPS">
<summary>
 Unpack and Interleave Low Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUNPCKLPD">
<summary>
 Unpack and Interleave Low Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUNPCKHPS">
<summary>
 Unpack and Interleave High Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUNPCKHPD">
<summary>
 Unpack and Interleave High Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUCOMISS">
<summary>
 Unordered Compare Scalar Single-Precision FPValues and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VUCOMISD">
<summary>
 Unordered Compare Scalar Double-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSUBSS">
<summary>
 Subtract Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSUBSD">
<summary>
 Subtract Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSUBPS">
<summary>
 Subtract Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSUBPD">
<summary>
 Subtract Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSQRTSS">
<summary>
 Compute square root of scalar single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSQRTSD">
<summary>
 Compute scalar square root of scalar double-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSQRTPS">
<summary>
 Compute square roots of packed single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSQRTPD">
<summary>
 Compute packed square roots of packed double-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFPS">
<summary>
 Shuffle Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFPD">
<summary>
 Shuffle Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFI64X2">
<summary>
 Shuffle 128-bit lanes of a vector with 64 bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFI32X4">
<summary>
 Shuffle 128-bit lanes of a vector with 32 bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFF64X2">
<summary>
 Shuffle 128-bit lanes of a vector with 64 bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSHUFF32X4">
<summary>
 Shuffle 128-bit lanes of a vector with 32 bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCATTERQQ">
<summary>
 Scatter SP/DP FP elements in a vector to memory using qword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCATTERQD">
<summary>
 Scatter SP/DP FP elements in a vector to memory using qword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCATTERDQ">
<summary>
 Scatter SP/DP FP elements in a vector to memory using dword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCATTERDD">
<summary>
 Scatter SP/DP FP elements in a vector to memory using dword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCALESS">
<summary>
 Multiply the low SP FP element of a vector by powers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCALESD">
<summary>
 Multiply the low DP FP element of a vector by powers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCALEPS">
<summary>
 Multiply packed SP FP elements of a vector by powers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VSCALEPD">
<summary>
 Multiply packed DP FP elements of a vector by powers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT28SS">
<summary>
 Computes the reciprocal square root of the low float32 value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT28SD">
<summary>
 Computes the reciprocal square root of the low float64 value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT28PS">
<summary>
 Computes the reciprocal square root of the float32 values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT28PD">
<summary>
 Computes the reciprocal square root of the float64 values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT14SS">
<summary>
 Compute Approximate Reciprocal of Square Root of Scalar Float32 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT14SD">
<summary>
 Compute Approximate Reciprocal of Square Root of Scalar Float64 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT14PS">
<summary>
 Compute Approximate Reciprocals of Square Roots of Packed Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRSQRT14PD">
<summary>
 Compute Approximate Reciprocals of Square Roots of Packed Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRNDSCALESS">
<summary>
 Round Scalar Float32 Value To Include A Given Number Of Fraction Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRNDSCALESD">
<summary>
 Round Scalar Float64 Value To Include A Given Number Of Fraction Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRNDSCALEPS">
<summary>
 Round Packed Float32 Values To Include A Given Number Of Fraction Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRNDSCALEPD">
<summary>
 Round Packed Float64 Values To Include A Given Number Of Fraction Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VREDUCESS">
<summary>
 Perform a Reduction Transformation on a Scalar Float32 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VREDUCESD">
<summary>
 Perform a Reduction Transformation on a Scalar Float64 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VREDUCEPS">
<summary>
 Perform Reduction Transformation on Packed Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VREDUCEPD">
<summary>
 Perform Reduction Transformation on Packed Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP28SS">
<summary>
 Computes the reciprocal approximation of the low float32 value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP28SD">
<summary>
 Computes the reciprocal approximation of the low float64 value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP28PS">
<summary>
 Computes the reciprocal approximation of the float32 values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP28PD">
<summary>
 Computes the reciprocal approximation of the float64 values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP14SS">
<summary>
 Compute Approximate Reciprocal of Scalar Float32 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP14SD">
<summary>
 Compute Approximate Reciprocal of Scalar Float64 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP14PS">
<summary>
 Compute Approximate Reciprocals of Packed Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRCP14PD">
<summary>
 Compute Approximate Reciprocals of Packed Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRANGESS">
<summary>
 Range Restriction Calculation From a Pair of Scalar Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRANGESD">
<summary>
 Range Restriction Calculation From a pair of Scalar Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRANGEPS">
<summary>
 Range Restriction Calculation For Packed Pairs of Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VRANGEPD">
<summary>
 Range Restriction Calculation For Packed Pairs of Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPXORQ">
<summary>
 Bitwise XOR of packed quadword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPXORD">
<summary>
 Bitwise XOR of packed doubleword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPXOR">
<summary>
 Logical Exclusive OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKLWD">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKLQDQ">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKLDQ">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKLBW">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKHWD">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKHQDQ">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKHDQ">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPUNPCKHBW">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTNMW">
<summary>
 Perform bitwise NAND of word elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTNMQ">
<summary>
 Perform bitwise NAND of qword elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTNMD">
<summary>
 Perform bitwise NAND of dword elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTNMB">
<summary>
 Perform bitwise NAND of byte elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTMW">
<summary>
 Perform bitwise AND of word elems of two vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTMQ">
<summary>
 Perform bitwise AND of qword elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTMD">
<summary>
 Perform bitwise AND of dword elems of 2-vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTESTMB">
<summary>
 Perform bitwise AND of byte elems of two vecs and write results to opmask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTEST">
<summary>
 Logical Compare.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTERNLOGD">
<summary>
 Bitwise Ternary Logic.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTERLOGQ">
<summary>
 Perform bitwise ternary logic operation of three vectors.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPTERLOGD">
<summary>
 Perform bitwise ternary logic operation of three vectors.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBW">
<summary>
 Subtract Packed Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBUSW">
<summary>
 Subtract Packed Unsigned Integers with Unsigned Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBUSB">
<summary>
 Subtract Packed Unsigned Integers with Unsigned Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBSW">
<summary>
 Subtract Packed Signed Integers with Signed Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBSB">
<summary>
 Subtract Packed Signed Integers with Signed Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBQ">
<summary>
 Subtract Packed Integers (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBD">
<summary>
 Subtract Packed Integers (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSUBB">
<summary>
 Subtract Packed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRLW">
<summary>
 Shift Packed Data Right Logical (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRLVW">
<summary>
 Variable Bit Shift Right Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRLQ">
<summary>
 Shift Packed Data Right Logical (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRLDQ">
<summary>
 Shift Double Quadword Right Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRLD">
<summary>
 Shift Packed Data Right Logical (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRAW">
<summary>
 Shift Packed Data Right Arithmetic (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRAVW">
<summary>
 Variable Bit Shift Right Arithmetic.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRAVQ">
<summary>
 Shift qwords right by shift counts in a vector and shifting in sign bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRAQ">
<summary>
 Shift qwords right by a constant shift count and shifting in sign bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSRAD">
<summary>
 Shift Packed Data Right Arithmetic (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSLLW">
<summary>
 Shift Packed Data Left Logical (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSLLVW">
<summary>
 Variable Bit Shift Left Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSLLQ">
<summary>
 Shift Packed Data Left Logical (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSLLDQ">
<summary>
 Shift Double Quadword Left Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSLLD">
<summary>
 Shift Packed Data Left Logical (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSIGNW">
<summary>
 Packed SIGN (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSIGND">
<summary>
 Packed SIGN (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSIGNB">
<summary>
 Packed SIGN (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSHUFLW">
<summary>
 Shuffle Packed Low Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSHUFHW">
<summary>
 Shuffle Packed High Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSHUFD">
<summary>
 Shuffle Packed Doublewords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSHUFB">
<summary>
 Packed Shuffle Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSCATTERQQ">
<summary>
 Scatter qword elements in a vector to memory using qword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSCATTERQD">
<summary>
 Scatter dword elements in a vector to memory using qword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSCATTERDQ">
<summary>
 Scatter qword elements in a vector to memory using dword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSCATTERDD">
<summary>
 Scatter dword elements in a vector to memory using dword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPSADBW">
<summary>
 Compute Sum of Absolute Differences.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPRORRQ">
<summary>
 Rotate qword element right by shift counts specified.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPRORRD">
<summary>
 Rotate dword element right by shift counts specified.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPRORQ">
<summary>
 Rotate qword element right by a constant shift count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPRORD">
<summary>
 Rotate dword element right by a constant shift count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPROLVQ">
<summary>
 Rotate qword element left by shift counts specified.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPROLVD">
<summary>
 Rotate dword element left by shift counts specified.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPROLQ">
<summary>
 Rotate qword elem left by a constant shift count with conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPROLD">
<summary>
 Rotate dword elem left by a constant shift count with conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPOR">
<summary>
 Bitwise Logical OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULUDQ">
<summary>
 Multiply Packed Unsigned Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULLW">
<summary>
 Multiply Packed Signed Integers and Store Low Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULLQ">
<summary>
 Multiply Packed Integers and Store Low Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULLD">
<summary>
 Multiply Packed Integers and Store Low Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULHW">
<summary>
 Multiply Packed Signed Integers and Store High Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULHUW">
<summary>
 Multiply Packed Unsigned Integers and Store High Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULHRSW">
<summary>
 Packed Multiply High with Round and Scale.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMULDQ">
<summary>
 Multiply Packed Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXWQ">
<summary>
 Packed Move with Zero Extend (16-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXWD">
<summary>
 Packed Move with Zero Extend (16-bit to 32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXDQ">
<summary>
 Packed Move with Zero Extend (32-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXBW">
<summary>
 Packed Move with Zero Extend (8-bit to 16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXBQ">
<summary>
 Packed Move with Zero Extend (8-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVZXBD">
<summary>
 Packed Move with Zero Extend (8-bit to 32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVWB">
<summary>
 Down convert word elements in a vector to byte elements using truncation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVW2M">
<summary>
 Convert a vector register in 16-bit granularity to an opmask register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSWB">
<summary>
 Down Convert Word to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSQW">
<summary>
 Down Convert QWord to Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSQD">
<summary>
 Down Convert QWord to DWord
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSQB">
<summary>
 Down Convert QWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSDW">
<summary>
 Down Convert DWord to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVUSDB">
<summary>
 Down Convert DWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXWQ">
<summary>
 Packed Move with Sign Extend (16-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXWD">
<summary>
 Packed Move with Sign Extend (16-bit to 32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXDQ">
<summary>
 Packed Move with Sign Extend (32-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXBW">
<summary>
 Packed Move with Sign Extend (8-bit to 16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXBQ">
<summary>
 Packed Move with Sign Extend (8-bit to 64-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSXBD">
<summary>
 Packed Move with Sign Extend (8-bit to 32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSWB">
<summary>
 Down Convert Word to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSQW">
<summary>
 Down Convert QWord to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSQD">
<summary>
 Down Convert QWord to Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSQB">
<summary>
 Down Convert QWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSDW">
<summary>
 Down Convert DWord to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVSDB">
<summary>
 Down Convert DWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVQW">
<summary>
 Down Convert QWord to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVQD">
<summary>
 Down Convert QWord to DWord.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVQB">
<summary>
 Down Convert QWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVQ2M">
<summary>
 Convert a Vector Register to a Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVMSKB">
<summary>
 Move Byte Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVM2W">
<summary>
 Convert opmask register to vector register in 16-bit granularity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVM2Q">
<summary>
 Convert opmask register to vector register in 64-bit granularity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVM2D">
<summary>
 Convert opmask register to vector register in 32-bit granularity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVM2B">
<summary>
 Convert opmask register to vector register in 8-bit granularity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVDW">
<summary>
 Down Convert DWord to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVDB">
<summary>
 Down Convert DWord to Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVB2M">
<summary>
 Convert a Vector Register to a Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMOVB2D">
<summary>
 Convert a vector register in 32/64-bit granularity to an opmask register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINUW">
<summary>
 Minimum of Packed Unsigned Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINUQ">
<summary>
 Compute minimum of packed unsigned 64-bit integer elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINUD">
<summary>
 Minimum of Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINUB">
<summary>
 Minimum of Packed Unsigned Byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINSW">
<summary>
 Minimum of Packed Signed Word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINSQ">
<summary>
 Compute minimum of packed signed 64-bit integer elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINSD">
<summary>
 Minimum of Packed Signed Integers (dword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMINSB">
<summary>
 Minimum of Packed Signed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXUW">
<summary>
 Maximum of Packed Unsigned Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXUQ">
<summary>
 Compute maximum of packed unsigned 64-bit integer elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXUD">
<summary>
 Maximum of Packed Unsigned Integers (dword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXUB">
<summary>
 Maximum of Packed Unsigned Byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXSW">
<summary>
 Maximum of Packed Signed Word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXSQ">
<summary>
 Compute maximum of packed signed 64-bit integer elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXSD">
<summary>
 Maximum of Packed Signed Integers (dword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMAXSB">
<summary>
 Maximum of Packed Signed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPMADDWD">
<summary>
 Multiply and Add Packed Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPLZCNTQ">
<summary>
 Count the number of leading zero bits of packed qword elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPLZCNTD">
<summary>
 Count the number of leading zero bits of packed dword elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPINSRQ">
<summary>
 Insert Qword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPINSRW">
<summary>
 Insert Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPINSRD">
<summary>
 Insert Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPINSRB">
<summary>
 Insert Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHSUBW">
<summary>
 Packed Horizontal Subtract (16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHSUBSW">
<summary>
 Packed Horizontal Subtract and Saturate (16-bit)
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHSUBD">
<summary>
 Packed Horizontal Subtract (32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHMINPOSUW">
<summary>
 Packed Horizontal Word Minimum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHADDW">
<summary>
 Packed Horizontal Add (16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHADDSW">
<summary>
 Packed Horizontal Add and Saturate (16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPHADDD">
<summary>
 Packed Horizontal Add (32-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPGATHERDD">
<summary>
 Gather packed dword values using signed Dword/Qword indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPEXTRW">
<summary>
 Extract Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPEXPANDQ">
<summary>
 Load Sparse Packed Quadword Integer Values from Dense Memory / Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPEXPANDD">
<summary>
 Load Sparse Packed Doubleword Integer Values from Dense Memory / Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMW">
<summary>
 Permute packed word elements.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMT2Q">
<summary>
 Full permute of two tables of qword elements overwriting one source table.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMT2PS">
<summary>
 Full permute of two tables of SP elements overwriting one source table.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMT2PD">
<summary>
 Full permute of two tables of DP elements overwriting one source table.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMT2D">
<summary>
 Full permute of two tables of dword elements overwriting one source table.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2W">
<summary>
 Full Permute From Two Tables Overwriting the Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2Q">
<summary>
 Full permute of two tables of qword elements overwriting the index vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2PS">
<summary>
 Full permute of two tables of SP elements overwriting the index vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2PD">
<summary>
 Full permute of two tables of DP elements overwriting the index vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2D">
<summary>
 Full permute of two tables of dword elements overwriting the index vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPERMI2B">
<summary>
 Full Permute of Bytes from Two Tables Overwriting the Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCONFLICTQ">
<summary>
 Detect conflicts within a vector of packed 64-bit integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCONFLICTD">
<summary>
 Detect conflicts within a vector of packed 32/64-bit integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCOMPRESSQ">
<summary>
 Store Sparse Packed Quadword Integer Values into Dense Memory/Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCOMPRESSD">
<summary>
 Store Sparse Packed Doubleword Integer Values into Dense Memory/Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMUW">
<summary>
 Compare packed unsigned words using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMUQ">
<summary>
 Compare packed unsigned quadwords using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMUD">
<summary>
 Compare packed unsigned dwords using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMUB">
<summary>
 Compare packed unsigned bytes using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPW">
<summary>
 Compare packed signed words using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPQ">
<summary>
 Compare packed signed quadwords using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPISTRM">
<summary>
 Packed Compare Implicit Length Strings, Return Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPISTRI">
<summary>
 Packed Compare Implicit Length Strings, Return Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPGTW">
<summary>
 Compare Packed Signed Integers for Greater Than (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPGTQ">
<summary>
 Compare Packed Data for Greater Than (qword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPGTD">
<summary>
 Compare Packed Signed Integers for Greater Than (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPGTB">
<summary>
 Compare Packed Signed Integers for Greater Than (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPESTRM">
<summary>
 Packed Compare Explicit Length Strings, Return Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPESTRI">
<summary>
 Packed Compare Explicit Length Strings, Return Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPEQW">
<summary>
 Compare Packed Data for Equal (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPEQQ">
<summary>
 Compare Packed Data for Equal (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPEQD">
<summary>
 Compare Packed Data for Equal (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPEQB">
<summary>
 Compare Packed Data for Equal (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPD">
<summary>
 Compare packed signed dwords using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPCMPB">
<summary>
 Compare packed signed bytes using specified primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBROADCASTW">
<summary>
 Broadcast from general-purpose register to vector register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBROADCASTQ">
<summary>
 Broadcast from general-purpose register to vector register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBROADCASTM">
<summary>
 Broadcast Mask to Vector Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBROADCASTD">
<summary>
 Broadcast from general-purpose register to vector register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBROADCASTB">
<summary>
 Broadcast Integer Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBLENDMW">
<summary>
 Blend word elements using opmask as select control.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBLENDMQ">
<summary>
 Blend qword elements using opmask as select control.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBLENDMD">
<summary>
 Blend Int32/Int64 Vectors Using an OpMask Control.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPBLENDMB">
<summary>
 Blend Byte/Word Vectors Using an Opmask Control.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPAVGW">
<summary>
 Average Packed Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPAVGB">
<summary>
 Average Packed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPANDN">
<summary>
 Logical AND NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPAND">
<summary>
 Logical AND.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPALIGNR">
<summary>
 Packed Align Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDW">
<summary>
 Add Packed word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDUSW">
<summary>
 Add Packed Unsigned Integers with Unsigned Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDUSB">
<summary>
 Add Packed Unsigned Integers with Unsigned Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDSW">
<summary>
 Add Packed Signed Integers with Signed Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDSB">
<summary>
 Add Packed Signed Integers with Signed Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDQ">
<summary>
 Add Packed Quadword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDD">
<summary>
 Add Packed Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPADDB">
<summary>
 Add Packed byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPACKUSWB">
<summary>
 Pack with Unsigned Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPACKUSDW">
<summary>
 Pack with Unsigned Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPACKSSWB">
<summary>
 Pack with Signed Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPACKSSDW">
<summary>
 Pack with Signed Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPABSW">
<summary>
 Packed Absolute Value (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPABSD">
<summary>
 Packed Absolute Value (dword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VPABSB">
<summary>
 Packed Absolute Value (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VORPS">
<summary>
 Bitwise Logical OR of Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VORPD">
<summary>
 Bitwise Logical OR of Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMXON">
<summary>
 Enter VMX Operation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMXOFF">
<summary>
 Leave VMX Operation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMWRITE">
<summary>
 Writes a component to the VMCS from a source operand.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMULSS">
<summary>
 Multiply Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMULSD">
<summary>
 Multiply Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMULPS">
<summary>
 Multiply Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMULPD">
<summary>
 Multiply Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMRESUME">
<summary>
 Resume Virtual Machine.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMREAD">
<summary>
 Reads a component from the VMCS and stores it into a destination operand.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMPTRST">
<summary>
 Store Pointer to Virtual-Machine Control Structure.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMPTRLD">
<summary>
 Load Pointer to Virtual-Machine Control Structure.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVUPS">
<summary>
 Move Unaligned Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVUPD">
<summary>
 Move Unaligned Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVSS">
<summary>
 Move Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVSLDUP">
<summary>
 Move Packed Single-FP Low and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVSHDUP">
<summary>
 Move Packed Single-FP High and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVSD">
<summary>
 Move Data from String to String (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVQ">
<summary>
 Move Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVNTPS">
<summary>
 Store Packed Single-Precision FP Values Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVNTPD">
<summary>
 Store Packed Double-Precision FP Values Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVNTDQ">
<summary>
 Load Double Quadword Non-Temporal Aligned Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVMSKPS">
<summary>
 Extract Packed Single-Precision Floating-Point Sign Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVMSKPD">
<summary>
 Extract Packed Double-Precision Floating-Point Sign Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVLPS">
<summary>
 Move Low Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVLPD">
<summary>
 Move Low Packed Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVLHPS">
<summary>
 Move Packed Single-Precision Floating-Point Values Low to High.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVHPS">
<summary>
 Move High Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVHPD">
<summary>
 Move High Packed Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVHLPS">
<summary>
 Move Packed Single-Precision Floating-Point Values High to Low.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQU8">
<summary>
 VMOVDQU with 8-bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQU64">
<summary>
 Move Unaligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQU32">
<summary>
 Move Unaligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQU16">
<summary>
 VMOVDQU with 16-bit granular conditional update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQU">
<summary>
 Move Unaligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQA64">
<summary>
 Move Aligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQA32">
<summary>
 Move Aligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDQA">
<summary>
 Move Aligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVDDUP">
<summary>
 Move One Double-FP and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVD">
<summary>
 Move Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVAPS">
<summary>
 Move Aligned Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMOVAPD">
<summary>
 Move Aligned Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMLAUNCH">
<summary>
 Launch Virtual Machine.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMFUNC">
<summary>
 Invoke VM function.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMCLEAR">
<summary>
 Clear Virtual-Machine Control Structure.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMCALL">
<summary>
 Call to VM Monitor.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMINSS">
<summary>
 Return Minimum Scalar Single-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMAXSS">
<summary>
 Return Maximum Scalar Single-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMAXSD">
<summary>
 Return Maximum Scalar Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VMAXPS">
<summary>
 Maximum of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VLDDQU">
<summary>
 Load Unaligned Integer 128 Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTI64X4">
<summary>
 Insert 256 bits of packed quadword integer values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTI64X2">
<summary>
 Insert Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTI32X8">
<summary>
 Insert 256 bits of packed doubleword integer values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTI128">
<summary>
 Insert Packed Integer Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTF64X4">
<summary>
 Insert Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTF64X2">
<summary>
 Insert Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTF32X4">
<summary>
 Insert Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VINSERTF128">
<summary>
 Insert Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETMANTSS">
<summary>
 Extract Float32 Vector of Normalized Mantissa from Float32 Vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETMANTSD">
<summary>
 Extract Float64 of Normalized Mantissas from Float64 Scalar.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETMANTPS">
<summary>
 Extract Float32 Vector of Normalized Mantissas from Float32 Vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETMANTPD">
<summary>
 Extract Float64 Vector of Normalized Mantissas from Float64 Vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETEXPSS">
<summary>
 Convert Exponents of Scalar SP FP Values to SP FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETEXPSD">
<summary>
 Convert Exponents of Scalar DP FP Values to DP FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETEXPPS">
<summary>
 Convert Exponents of Packed SP FP Values to SP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGETEXPPD">
<summary>
 Convert Exponents of Packed DP FP Values to DP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VGATHERDPS">
<summary>
 Gather Packed SP FP values Using Signed Dword/Qword Indices.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFPCLASSSS">
<summary>
 Tests Types Of a Scalar Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFPCLASSSD">
<summary>
 Tests Types Of a Scalar Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFPCLASSPS">
<summary>
 Tests Types Of a Packed Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFPCLASSPD">
<summary>
 Tests Types Of a Packed Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFNMADD231SD">
<summary>
 Fused Negative Multiply-Add of Scalar Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFNMADD213SD">
<summary>
 Fused Negative Multiply-Add of Scalar Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFNMADD132SD">
<summary>
 Fused Negative Multiply-Add of Scalar Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFNMADD231PD">
<summary>
 Fused Negative Multiply-Add of Packed Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFNMADD132PD">
<summary>
 Fused Negative Multiply-Add of Packed Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMSUB231SD">
<summary>
 Fused Multiply-Subtract of Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMSUB132SS">
<summary>
 Fused Multiply-Subtract of Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD231SS">
<summary>
 Fused Multiply-Add of Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD231SD">
<summary>
 Fused Multiply-Add of Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD231PD">
<summary>
 Fused Multiply-Add of Packed Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD213SS">
<summary>
 Fused Multiply-Add of Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD213SD">
<summary>
 Fused Multiply-Add of Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD213PS">
<summary>
 Fused Multiply-Add of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD132PD">
<summary>
 Fused Multiply-Add of Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD132SS">
<summary>
 Fused Multiply-Add of Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFMADD132SD">
<summary>
 Fused Multiply-Add of Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFIXUPIMMSS">
<summary>
 Fix Up Special Scalar Float32 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFIXUPIMMSD">
<summary>
 Fix Up Special Scalar Float64 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFIXUPIMMPS">
<summary>
 Fix Up Special Packed Float32 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VFIXUPIMMPD">
<summary>
 Fix Up Special Packed Float64 Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTI64X4">
<summary>
 Extract a vector from a full-length vector with 64-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTI64X2">
<summary>
 Extract a vector from a full-length vector with 64-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTI32X8">
<summary>
 Extract a vector from a full-length vector with 32-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTI32X4">
<summary>
 Extract a vector from a full-length vector with 32-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTF64X4">
<summary>
 Extract a vector from a full-length vector with 64-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTF64X2">
<summary>
 Extract a vector from a full-length vector with 64-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTF32X8">
<summary>
 Extract a vector from a full-length vector with 32-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXTRACTF32X4">
<summary>
 Extract a vector from a full-length vector with 32-bit granular update.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXPANDPS">
<summary>
 Load Sparse Packed Single-Precision FP Values from Dense Memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXPANDPD">
<summary>
 Load Sparse Packed Double-Precision FP Values from Dense Memory.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXP2SS">
<summary>
 Compute approximate base-2 exponential of the low SP FP elem of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXP2SD">
<summary>
 Compute approximate base-2 exponential of the low DP FP elem of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXP2PS">
<summary>
 Compute approximate base-2 exponential of packed SP FP elems of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VEXP2PD">
<summary>
 Compute approximate base-2 exponential of packed DP FP elems of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VERW">
<summary>
 Verify a Segment for Writing.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VERR">
<summary>
 Verify a Segment for Reading.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VDIVSS">
<summary>
 Divide Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VDIVSD">
<summary>
 Divide Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VDIVPS">
<summary>
 Divide Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VDIVPD">
<summary>
 Divide Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VDBPSADBW">
<summary>
 Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUSI2USS">
<summary>
 Convert an unsigned integer to the low SP FP elem and merge to a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUSI2USD">
<summary>
 Convert an unsigned integer to the low DP FP elem and merge to a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUQQ2PS">
<summary>
 Convert Packed Unsigned QWord Integers to Packed SP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUQQ2PD">
<summary>
 Convert Packed Unsigned QWord Integers to Packed DP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUDQ2PS">
<summary>
 Convert Packed Unsigned DWord Integers to Packed SP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTUDQ2PD">
<summary>
 Convert Packed Unsigned DWord Integers to Packed DP FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTSS2USI">
<summary>
 Convert with Truncation Scalar Single-Precision FP Value to Unsigned Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTSS2SI">
<summary>
 Convert with Truncation Scalar Single-Precision FP Value to Dword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTSD2USI">
<summary>
 Convert with Truncation Scalar DP FP Value to Unsigned Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTSD2SI">
<summary>
 Convert with Truncation Scalar Double-Precision FP Value to Signed.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPS2UQQ">
<summary>
 Convert with Truncation Packed SP FP Values to Packed Unsigned QWord Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPS2UDQ">
<summary>
 Convert with Truncation Packed SP FP Values to Packed Unsigned DWord Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPS2QQ">
<summary>
 Convert with Truncation Packed SP FP Values to Packed Signed QWord Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPD2UQQ">
<summary>
 Convert with Truncation Packed DP FP Values to Packed Unsigned QWord Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPD2UDQ">
<summary>
 Convert with Truncation Packed DP FP Values to Packed Unsigned DWord Int.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTTPD2QQ">
<summary>
 Convert with Truncation Packed DP FP Values to Packed QWord Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSS2USI">
<summary>
 Convert Scalar Single-Precision FP Value to Unsigned Doubleword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSS2SI">
<summary>
 Convert Scalar Single-Precision FP Value to Dword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSS2SD">
<summary>
 Convert Scalar Single-Precision FP Val to Scalar Double-Precision FP Val.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSI2SS">
<summary>
 Convert Dword Integer to Scalar Single-Precision FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSI2SD">
<summary>
 Convert Dword Integer to Scalar Double-Precision FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSD2USI">
<summary>
 Convert Scalar Double-Precision FP Value to Unsigned Doubleword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSD2SS">
<summary>
 Convert Scalar Double-Precision FP Val to Scalar Single-Precision FP Val.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTSD2SI">
<summary>
 Convert Scalar Double-Precision FP Value to Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTQQ2PS">
<summary>
 Convert Packed Quadword Integers to Packed Single-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTQQ2PD">
<summary>
 Convert Packed Quadword Integers to Packed Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPS2UQQ">
<summary>
 Convert Packed SP FP Values to Packed Unsigned QWord Int Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPS2UDQ">
<summary>
 Convert Packed SP FP Values to Packed Unsigned DWord Int Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPS2QQ">
<summary>
 Convert Packed SP FP Values to Packed Signed QWord Int Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPS2PH">
<summary>
 Convert Single-Precision FP value to 16-bit FP value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPS2PD">
<summary>
 Convert Packed Single-Precision FP Values to Packed Dbl-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPH2PS">
<summary>
 Convert 16-bit FP values to Single-Precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPD2UQQ">
<summary>
 Convert Packed DP FP Values to Packed Unsigned QWord Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPD2UDQ">
<summary>
 Convert Packed DP FP Values to Packed Unsigned DWord Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPD2QQ">
<summary>
 Convert Packed Double-Precision FP Values to Packed Quadword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTPD2PS">
<summary>
 Convert two packed double-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCVTDQ2PD">
<summary>
 Convert two packed signed doubleword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCMPPS">
<summary>
 Compare Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCMPPD">
<summary>
 Compare Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCOMPRESSPS">
<summary>
 Compress packed SP elements of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCOMPRESSPD">
<summary>
 Compress packed DP elements of a vector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCOMISS">
<summary>
 Compare Scalar Ordered Single-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VCOMISD">
<summary>
 Compare Scalar Ordered Double-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VBROADCASTSS">
<summary>
 Broadcast Floating-Point Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VBROADCASTSD">
<summary>
 Broadcast low double-precision floating-point element.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VBROADCASTI128">
<summary>
 Broadcast 128 bits of int data in mem to low and high 128-bits in ymm1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VBLENDMPS">
<summary>
 Replace the VBLENDVPS instructions (using opmask as select control).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VBLENDMPD">
<summary>
 Replace the VBLENDVPD instructions (using opmask as select control).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VANDPS">
<summary>
 Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VANDPD">
<summary>
 Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VANDNPS">
<summary>
 Bitwise Logical AND of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VANDNPD">
<summary>
 Bitwise Logical AND of Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VALIGNQ">
<summary>
 Perform qword alignment of two concatenated source vectors.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VALIGND">
<summary>
 Perform dword alignment of two concatenated source vectors.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VADDSS">
<summary>
 Add Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VADDSD">
<summary>
 Add Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VADDPS">
<summary>
 Add Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.VADDPD">
<summary>
 Add Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UNPCKLPS">
<summary>
 Unpack and Interleave Low Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UNPCKLPD">
<summary>
 Unpack and Interleave Low Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UNPCKHPS">
<summary>
 Unpack and Interleave High Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UNPCKHPD">
<summary>
 Unpack and Interleave High Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UD2">
<summary>
 Undefined Instruction (Raise invalid opcode exception).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UD">
<summary>
 Undefined instruction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UCOMISS">
<summary>
 Unordered Compare Scalar Single-Precision FPValues and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.UCOMISD">
<summary>
 Unordered Compare Scalar Double-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.TZCNT">
<summary>
 Count the Number of Trailing Zero Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.TEST">
<summary>
 Logical Compare.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SYSRET">
<summary>
 Return From Fast System Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SYSEXIT">
<summary>
 Fast Return from Fast System Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SYSENTER">
<summary>
 Fast System Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SYSCALL">
<summary>
 Fast System Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SWAPGS">
<summary>
 Swap GS Base Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SUBSS">
<summary>
 Subtract Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SUBSD">
<summary>
 Subtract Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SUBPS">
<summary>
 Subtract Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SUBPD">
<summary>
 Subtract Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SUB">
<summary>
 Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STR">
<summary>
 Store Task Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STOSW">
<summary>
 Store String (store AX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STOSQ">
<summary>
 Store String (store RAX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STOSD">
<summary>
 Store String (store EAX).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STOSB">
<summary>
 Store String (store AL).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STMXCSR">
<summary>
 Store MXCSR Register State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STI">
<summary>
 Set Interrupt Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STD">
<summary>
 Set Direction Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STC">
<summary>
 Set Carry Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.STAC">
<summary>
 Set AC Flag in EFLAGS Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SQRTSS">
<summary>
 Compute square root of scalar single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SQRTSD">
<summary>
 Compute scalar square root of scalar double-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SQRTPS">
<summary>
 Compute square roots of packed single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SQRTPD">
<summary>
 Compute packed square roots of packed double-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SMSW">
<summary>
 Store Machine Status Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SLDT">
<summary>
 Store Local Descriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SIDT">
<summary>
 Store Interrupt Descriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHUFPS">
<summary>
 Shuffle Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHUFPD">
<summary>
 Shuffle Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHRX">
<summary>
 Shift logic right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHRD">
<summary>
 Double Precision Shift Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHR">
<summary>
 Shift.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHLX">
<summary>
 Shift logic left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHLD">
<summary>
 Double Precision Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHL">
<summary>
 Shift.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA256RNDS2">
<summary>
 Perform two rounds of SHA256 operations.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA256MSG2">
<summary>
 Perform the final calculation for the next four SHA256 message dwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA256MSG1">
<summary>
 Perform an intermediate calculation for the next 4 SHA256 message dwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA1RNDS4">
<summary>
 Perform four rounds of SHA1 operations.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA1NEXTE">
<summary>
 Calculate SHA1 state E after four rounds.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA1MSG2">
<summary>
 Perform a Final Calculation for the Next Four SHA1 Message Dwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SHA1MSG1">
<summary>
 Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SGDT">
<summary>
 Store Global Descriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SFENCE">
<summary>
 Store Fence.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETZ">
<summary>
 Set byte if sign (ZF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETSSBSY">
<summary>
 Set busy bit in a supervisor shadow stack token.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETS">
<summary>
 Set byte if sign (SF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETP">
<summary>
 Set byte if parity (PF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETO">
<summary>
 Set byte if overflow (OF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNZ">
<summary>
 Set byte if not zero (ZF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNS">
<summary>
 Set byte if not sign (SF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNP">
<summary>
 Set byte if not parity (PF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNO">
<summary>
 Set byte if not overflow (OF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNL">
<summary>
 Set byte if not less (SF = OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETNB">
<summary>
 Set byte if not below (CF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETLE">
<summary>
 Set byte if less or equal (ZF = 1 or SF &lt;&gt; OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETL">
<summary>
 Set byte if less (SF &lt;&gt; OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETG">
<summary>
 Set byte if greater (ZF = 0 and SF = OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETBE">
<summary>
 Set byte if below or equal (CF = 1 or ZF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETB">
<summary>
 Set byte if below (CF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SETA">
<summary>
 Set byte if above (CF = 0 and ZF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SCASW">
<summary>
 Scan String (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SCASQ">
<summary>
 Scan String (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SCASD">
<summary>
 Scan String (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SCASB">
<summary>
 Scan String (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SBB">
<summary>
 Integer Subtraction with Borrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SAVEPREVSSP">
<summary>
 Save previous shadow stack pointer (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SARX">
<summary>
 Shift arithmetic right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SAR">
<summary>
 Shift.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.SAHF">
<summary>
 Store AH into Flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RSTORSSP">
<summary>
 Restore a shadow stack pointer (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RSQRTSS">
<summary>
 Compute reciprocal of square root of scalar single-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RSQRTPS">
<summary>
 Compute reciprocals of square roots of packed single-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RSM">
<summary>
 Resume from System Management Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROUNDSS">
<summary>
 Round Scalar Single Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROUNDSD">
<summary>
 Round Scalar Double Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROUNDPS">
<summary>
 Round Packed Single Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROUNDPD">
<summary>
 Round Packed Double Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RORX">
<summary>
 Rotate right without affecting arithmetic flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROR">
<summary>
 Rotate x bits r/m(x) right once.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ROL">
<summary>
 Rotate x bits r/m(x) left once.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RETNearImm">
<summary>
 Near return w/ immediate .
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RETNear">
<summary>
 Near return.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RETFarImm">
<summary>
 Far return w/ immediate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RETFar">
<summary>
 Far return.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.REPZ">
<summary>
 Repeat while equal/Repeat while zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.REPNZ">
<summary>
 Repeat while not equal/Repeat while not zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.REPNE">
<summary>
 Repeat while not equal/Repeat while not zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.REPE">
<summary>
 Repeat while equal/Repeat while zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.REP">
<summary>
 Repeat while ECX not zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDTSCP">
<summary>
 Read Time-Stamp Counter and Processor ID.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDTSC">
<summary>
 Read Time-Stamp Counter.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDSSPQ">
<summary>
 Read shadow stack point (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDSSPD">
<summary>
 Read shadow stack point (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDSEED">
<summary>
 Read Random SEED.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDRAND">
<summary>
 Read Random Number.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDPMC">
<summary>
 Read Performance-Monitoring Counters.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDPKRU">
<summary>
 Read Protection Key Rights for User Pages.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDMSR">
<summary>
 Read from Model Specific Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDGSBASE">
<summary>
 Read GS Segment Base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RDFSBASE">
<summary>
 Read FS Segment Base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RCR">
<summary>
 Rotate x bits (CF, r/m(x)) right once.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RCPSS">
<summary>
 Compute reciprocal of scalar single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RCPPS">
<summary>
 Compute reciprocals of packed single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.RCL">
<summary>
 Rotate x bits (CF, r/m(x)) left once.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PXOR">
<summary>
 Logical Exclusive OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSHFQ">
<summary>
 Push EFLAGS Register onto the Stack (RFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSHFD">
<summary>
 Push EFLAGS Register onto the Stack (EFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSHF">
<summary>
 Push EFLAGS Register onto the Stack (16bits of EFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSHAD">
<summary>
 Push All General-Purpose Registers (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSHA">
<summary>
 Push All General-Purpose Registers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUSH">
<summary>
 Push Word, Doubleword or Quadword Onto the Stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKLWD">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKLQDQ">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKLDQ">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKLBW">
<summary>
 Unpack Low Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKHWD">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKHQDQ">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKHDQ">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PUNPCKHBW">
<summary>
 Unpack High Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PTEST">
<summary>
 Logical Compare.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBW">
<summary>
 Subtract Packed Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBUSW">
<summary>
 Subtract Packed Unsigned Integers with Unsigned Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBUSB">
<summary>
 Subtract Packed Unsigned Integers with Unsigned Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBSW">
<summary>
 Subtract Packed Signed Integers with Signed Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBSB">
<summary>
 Subtract Packed Signed Integers with Signed Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBQ">
<summary>
 Subtract Packed Integers (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBD">
<summary>
 Subtract Packed Integers (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSUBB">
<summary>
 Subtract Packed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRLW">
<summary>
 Shift Packed Data Right Logical (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRLQ">
<summary>
 Shift Packed Data Right Logical (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRLDQ">
<summary>
 Shift Double Quadword Right Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRLD">
<summary>
 Shift Packed Data Right Logical (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRAW">
<summary>
 Shift Packed Data Right Arithmetic (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSRAD">
<summary>
 Shift Packed Data Right Arithmetic (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSLLW">
<summary>
 Shift Packed Data Left Logical (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSLLQ">
<summary>
 Shift Packed Data Left Logical (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSLLDQ">
<summary>
 Shift Double Quadword Left Logical.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSLLD">
<summary>
 Shift Packed Data Left Logical (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSIGNW">
<summary>
 Packed Sign Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSIGND">
<summary>
 Packed Sign Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSIGNB">
<summary>
 Packed Sign Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSHUFW">
<summary>
 Shuffle Packed Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSHUFLW">
<summary>
 Shuffle Packed Low Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSHUFHW">
<summary>
 Shuffle Packed High Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSHUFD">
<summary>
 Shuffle Packed Doublewords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSHUFB">
<summary>
 Packed Shuffle Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PSADBW">
<summary>
 Compute Sum of Absolute Differences.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHWT1">
<summary>
 Prefetch Vector Data Into Caches with Intent to Write and T1 Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHW">
<summary>
 Prefetch Data into Caches in Anticipation of a Write.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHT2">
<summary>
 Prefetch Data Into Caches (using T2 hint).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHT1">
<summary>
 Prefetch Data Into Caches (using T1 hint).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHT0">
<summary>
 Prefetch Data Into Caches (using T0 hint).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PREFETCHNTA">
<summary>
 Prefetch Data Into Caches (using NTA hint).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POR">
<summary>
 Bitwise Logical OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPFQ">
<summary>
 Pop Stack into EFLAGS Register (RFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPFD">
<summary>
 Pop Stack into EFLAGS Register (EFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPF">
<summary>
 Pop Stack into EFLAGS Register (lower 16bits EFLAGS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPCNT">
<summary>
 Return the Count of Number of Bits Set to 1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPAD">
<summary>
 Pop All General-Purpose Registers (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POPA">
<summary>
 Pop All General-Purpose Registers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.POP">
<summary>
 Pop a Value from the Stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULUDQ">
<summary>
 Multiply Packed Unsigned Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULLW">
<summary>
 Multiply Packed Signed Integers and Store Low Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULLD">
<summary>
 Multiply Packed Integers and Store Low Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULHW">
<summary>
 Multiply Packed Signed Integers and Store High Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULHUW">
<summary>
 Multiply Packed Unsigned Integers and Store High Result.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULHRSW">
<summary>
 Packed Multiply High with Round and Scale.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMULDQ">
<summary>
 Multiply Packed Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXWQ">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXWD">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXDQ">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXBW">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXBQ">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVZXBD">
<summary>
 Packed Move with Zero Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXWQ">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXWD">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXDQ">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXBW">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXBQ">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVSXBD">
<summary>
 Packed Move with Sign Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMOVMSKB">
<summary>
 Move Byte Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINUW">
<summary>
 Compare packed unsigned word integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINUD">
<summary>
 Minimum of Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINUB">
<summary>
 Minimum of Packed Unsigned Byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINSW">
<summary>
 Minimum of Packed Signed Word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINSD">
<summary>
 Compare packed signed dword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMINSB">
<summary>
 Minimum of Packed Signed Byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXUW">
<summary>
 Compare packed unsigned word integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXUD">
<summary>
 Compare packed unsigned dword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXUB">
<summary>
 Maximum of Packed Unsigned Byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXSW">
<summary>
 Maximum of Packed Signed Word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXSD">
<summary>
 Compare packed signed dword integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMAXSB">
<summary>
 Compare packed signed byte integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMADDWD">
<summary>
 Multiply and Add Packed Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PMADDUBSW">
<summary>
 Multiply and Add Packed Signed and Unsigned Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PINSRW">
<summary>
 Insert Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PINSRQ">
<summary>
 Insert a qword value from 64-bit register or memory into an XMM register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PINSRD">
<summary>
 Insert a dword value from 32-bit register or memory into an XMM register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PINSRB">
<summary>
 Insert Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHSUBW">
<summary>
 Packed Horizontal Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHSUBSW">
<summary>
 Packed Horizontal Subtract and Saturate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHSUBD">
<summary>
 Packed Horizontal Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHMINPOSUW">
<summary>
 Packed Horizontal Word Minimum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHADDW">
<summary>
 Packed Horizontal Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHADDSW">
<summary>
 Packed Horizontal Add and Saturate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PHADDD">
<summary>
 Packed Horizontal Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PEXTRW">
<summary>
 Extract Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PEXTRQ">
<summary>
 Extract Qword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PEXTRD">
<summary>
 Extract Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PEXTRB">
<summary>
 Extract Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PEXT">
<summary>
 Parallel extraction of bits using a mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PDEP">
<summary>
 Parallel deposit of bits using a mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPISTRM">
<summary>
 Packed Compare Implicit Length Strings, Return Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPISTRI">
<summary>
 Packed Compare Implicit Length Strings, Return Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPGTW">
<summary>
 Compare Packed Signed Integers for Greater Than (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPGTQ">
<summary>
 Performs logical compare of greater-than on packed integer quadwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPGTD">
<summary>
 Compare Packed Signed Integers for Greater Than (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPGTB">
<summary>
 Compare Packed Signed Integers for Greater Than (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPESTRM">
<summary>
 Packed Compare Explicit Length Strings, Return Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPESTRI">
<summary>
 Packed Compare Explicit Length Strings, Return Index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPEQW">
<summary>
 Compare packed words for equal.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPEQQ">
<summary>
 Compare Packed Data for Equal (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPEQD">
<summary>
 Compare Packed Data for Equal (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCMPEQB">
<summary>
 Compare Packed Data for Equal (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PCLMULQDQ">
<summary>
 Perform carryless multiplication of two 64-bit numbers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PBLENDW">
<summary>
 Blend Packed Words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PBLENDVB">
<summary>
 Variable Blend Packed Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PAVGW">
<summary>
 Average Packed Integers (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PAVGB">
<summary>
 Average Packed Integers (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PAUSE">
<summary>
 Spin Loop Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PANDN">
<summary>
 Logical AND NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PAND">
<summary>
 Logical AND.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PALIGNR">
<summary>
 Packed Align Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDW">
<summary>
 Add Packed word Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDUSW">
<summary>
 Add Packed Unsigned Integers with Unsigned Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDUSB">
<summary>
 Add Packed Unsigned Integers with Unsigned Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDSW">
<summary>
 Add Packed Signed Integers with Signed Saturation (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDSB">
<summary>
 Add Packed Signed Integers with Signed Saturation (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDQ">
<summary>
 Add Packed Quadword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDD">
<summary>
 Add Packed Doubleword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PADDB">
<summary>
 Add Packed byte Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PACKUSWB">
<summary>
 Pack with Unsigned Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PACKUSDW">
<summary>
 Pack with Unsigned Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PACKSSWB">
<summary>
 Pack with Signed Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PACKSSDW">
<summary>
 Pack with Signed Saturation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PABSW">
<summary>
 Computes the absolute value of each signed 16-bit data element.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PABSD">
<summary>
 Computes the absolute value of each signed 32-bit data element.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.PABSB">
<summary>
 Computes the absolute value of each signed byte data element.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OUTSW">
<summary>
 Output String to Port (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OUTSD">
<summary>
 Output String to Port (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OUTSB">
<summary>
 Output String to Port (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OUTS">
<summary>
 Output String to Port.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OUT">
<summary>
 Output to Port.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ORPS">
<summary>
 Bitwise Logical OR of Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ORPD">
<summary>
 Bitwise Logical OR of Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.OR">
<summary>
 Logical Inclusive OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.NOT">
<summary>
 One&apos;s Complement Negation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.NOP">
<summary>
 No Operation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.NEG">
<summary>
 Two&apos;s Complement Negation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MWAIT">
<summary>
 Monitor Wait.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MULX">
<summary>
 Unsigned multiply without affecting arithmetic flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MULSS">
<summary>
 Multiply Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MULSD">
<summary>
 Multiply Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MULPS">
<summary>
 Multiply Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MULPD">
<summary>
 Multiply Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MUL">
<summary>
 Unsigned Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MPSADBW">
<summary>
 Compute Multiple Packed Sums of Absolute Difference.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVZX">
<summary>
 Move with Zero-Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVUPS">
<summary>
 Move Unaligned Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVUPD">
<summary>
 Move Unaligned Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSXD">
<summary>
 Move with Sign-Extension (doubleword to quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSX">
<summary>
 Move with Sign-Extension.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSW">
<summary>
 Move Data from String to String (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSS">
<summary>
 Move Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSQ">
<summary>
 Move Data from String to String (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSLDUP">
<summary>
 Move Packed Single-FP Low and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSHDUP">
<summary>
 Move Packed Single-FP High and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSD">
<summary>
 Move Data from String to String (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVSB">
<summary>
 Move Data from String to String (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVQ2DQ">
<summary>
 Move Quadword from MMX Technology to XMM Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVQ">
<summary>
 Move Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTQ">
<summary>
 Store of Quadword Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTPS">
<summary>
 Store Packed Single-Precision FP Values Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTPD">
<summary>
 Store Packed Double-Precision FP Values Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTI">
<summary>
 Store Doubleword Using Non-Temporal Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTDQA">
<summary>
 Load Double Quadword Non-Temporal Aligned Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVNTDQ">
<summary>
 Load Double Quadword Non-Temporal Aligned Hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVMSKPS">
<summary>
 Extract Packed Single-Precision Floating-Point Sign Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVMSKPD">
<summary>
 Extract Packed Double-Precision Floating-Point Sign Mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVLPS">
<summary>
 Move Low Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVLPD">
<summary>
 Move Low Packed Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVLHPS">
<summary>
 Move Packed Single-Precision Floating-Point Values Low to High.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVHPS">
<summary>
 Move High Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVHPD">
<summary>
 Move High Packed Double-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVHLPS">
<summary>
 Move Packed Single-Precision Floating-Point Values High to Low.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVDQU">
<summary>
 Move Unaligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVDQA">
<summary>
 Move Aligned Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVDQ2Q">
<summary>
 Move Quadword from XMM to MMX Technology Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVDDUP">
<summary>
 Move One Double-FP and Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVD">
<summary>
 Move Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVBE">
<summary>
 Move Data After Swapping Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVAPS">
<summary>
 Move Aligned Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOVAPD">
<summary>
 Move Aligned Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MOV">
<summary>
 MOV.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MONITOR">
<summary>
 Set Up Monitor Address.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MINSS">
<summary>
 Return Minimum Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MINSD">
<summary>
 Return Minimum Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MINPS">
<summary>
 Return Minimum Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MINPD">
<summary>
 Return Minimum Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MFENCE">
<summary>
 Memory Fence.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MAXSS">
<summary>
 Return Maximum Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MAXSD">
<summary>
 Return Maximum Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MAXPS">
<summary>
 Return Maximum Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MAXPD">
<summary>
 Return Maximum Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MASKMOVQ">
<summary>
 Store Selected Bytes of Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.MASKMOVDQU">
<summary>
 Store Selected Bytes of Double Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LZCNT">
<summary>
 the Number of Leading Zero Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LTR">
<summary>
 Load Task Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LSS">
<summary>
 Load Far Pointer (SS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LSL">
<summary>
 Load Segment Limit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LOOPNE">
<summary>
 Loop According to ECX Counter (count &lt;&gt; 0 and ZF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LOOPE">
<summary>
 Loop According to ECX Counter (count &lt;&gt; 0 and ZF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LOOP">
<summary>
 Loop According to ECX Counter (count &lt;&gt; 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LODSW">
<summary>
 Load String (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LODSQ">
<summary>
 Load String (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LODSD">
<summary>
 Load String (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LODSB">
<summary>
 Load String (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LOCK">
<summary>
 Assert LOCK# Signal Prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LMSW">
<summary>
 Load Machine Status Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LLDT">
<summary>
 Load Local Descriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LIDT">
<summary>
 Load Interrupt Descriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LGS">
<summary>
 Load Far Pointer (GS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LGDT">
<summary>
 Load GlobalDescriptor Table Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LFS">
<summary>
 Load Far Pointer (FS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LFENCE">
<summary>
 Load Fence.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LES">
<summary>
 Load Far Pointer (ES).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LEAVE">
<summary>
 High Level Procedure Exit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LEA">
<summary>
 Load Effective Address.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LDS">
<summary>
 Load Far Pointer (DS).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LDMXCSR">
<summary>
 Load MXCSR Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LDDQU">
<summary>
 Load Unaligned Integer 128 Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LAR">
<summary>
 Load Access Rights Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.LAHF">
<summary>
 Load Status Flags into AH Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXORW">
<summary>
 Logical XOR of two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXORQ">
<summary>
 Logical XOR of two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXORD">
<summary>
 Logical XOR of two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXORB">
<summary>
 Logical XOR of two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXNORW">
<summary>
 Bitwise logical XNOR of two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXNORQ">
<summary>
 Bitwise logical XNOR of two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXNORD">
<summary>
 Bitwise logical XNOR of two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KXNORB">
<summary>
 Bitwise logical XNOR of two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KUNPCKWD">
<summary>
 Unpack and interleave two 16-bit opmasks into 32-bit mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KUNPCKDQ">
<summary>
 Unpack and interleave two 32-bit opmasks into 64-bit mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KUNPCKBW">
<summary>
 Unpack and interleave two 8-bit opmasks into 16-bit mask.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KTESTW">
<summary>
 Update EFLAGS according to result of bitwise TEST of two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KTESTQ">
<summary>
 Update EFLAGS according to result of bitwise TEST of two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KTESTD">
<summary>
 Update EFLAGS according to result of bitwise TEST of two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KTESTB">
<summary>
 Update EFLAGS according to result of bitwise TEST of two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTRW">
<summary>
 Shift right 16-bit opmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTRQ">
<summary>
 Shift right 64-bit opmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTRD">
<summary>
 Shift right 32-bit opmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTRB">
<summary>
 Shift right 8-bit opmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTLW">
<summary>
 Shift left 16-bitopmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTLQ">
<summary>
 Shift left 64-bitopmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTLD">
<summary>
 Shift left 32-bitopmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KSHIFTLB">
<summary>
 Shift left 8-bitopmask by specified count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORW">
<summary>
 Logical OR two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORTESTW">
<summary>
 Update EFLAGS according to the result of bitwise OR of two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORTESTQ">
<summary>
 Update EFLAGS according to the result of bitwise OR of two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORTESTD">
<summary>
 Update EFLAGS according to the result of bitwise OR of two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORTESTB">
<summary>
 Update EFLAGS according to the result of bitwise OR of two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORQ">
<summary>
 Logical OR two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORD">
<summary>
 Logical OR two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KORB">
<summary>
 Logical OR two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KNOTW">
<summary>
 Bitwise NOT of two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KNOTQ">
<summary>
 Bitwise NOT of two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KNOTD">
<summary>
 Bitwise NOT of two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KNOTB">
<summary>
 Bitwise NOT of two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KMOVW">
<summary>
 Move from or move to opmask register of 16-bit data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KMOVQ">
<summary>
 Move from or move to opmask register of 64-bit data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KMOVD">
<summary>
 Move from or move to opmask register of 32-bit data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KMOVB">
<summary>
 Move from or move to opmask register of 8-bit data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDW">
<summary>
 Logical AND two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDQ">
<summary>
 Logical AND two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDNW">
<summary>
 Logical AND NOT two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDNQ">
<summary>
 Logical AND NOT two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDND">
<summary>
 Logical AND NOT two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDNB">
<summary>
 Logical AND NOT two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDD">
<summary>
 Logical AND two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KANDB">
<summary>
 Logical AND two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KADDW">
<summary>
 Add two 16-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KADDQ">
<summary>
 Add two 64-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KADDD">
<summary>
 Add two 32-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.KADDB">
<summary>
 Add two 8-bit opmasks.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JZ">
<summary>
 Jump if Condition Is Met (Jump short if zero, ZF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JS">
<summary>
 Jump if Condition Is Met (Jump short if sign, SF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JP">
<summary>
 Jump if Condition Is Met (Jump near if parity, PF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JO">
<summary>
 Jump if Condition Is Met (Jump near if overflow, OF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNZ">
<summary>
 Jump if Condition Is Met (Jump near if not zero, ZF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNS">
<summary>
 Jump if Condition Is Met (Jump near if not sign, SF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JPO">
<summary>
 Jump if Condition Is Met (Jump near if not parity, PF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNO">
<summary>
 Jump if Condition Is Met (Jump near if not overflow, OF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JGE">
<summary>
 Jump if Condition Is Met (Jump near if not less, SF = OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JAE">
<summary>
 Jump if Condition Is Met (Jump near if not below, CF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JMPNear">
<summary>
 Near jmp.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JMPFar">
<summary>
 Far jmp.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNG">
<summary>
 Jump if Cond Is Met (Jump short if less or equal, ZF = 1 or SF &lt;&gt; OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNGE">
<summary>
 Jump if Condition Is Met (Jump short if less, SF &lt;&gt; OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNLE">
<summary>
 Jump if Condition Is Met (Jump short if greater, ZF = 0 and SF = OF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JRCXZ">
<summary>
 Jump if Condition Is Met (Jump short if RCX register is 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JECXZ">
<summary>
 Jump if Condition Is Met (Jump short if ECX register is 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JCXZ">
<summary>
 Jump if Condition Is Met (Jump short if CX register is 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNA">
<summary>
 Jump if Condition Is Met (Jump short if below or equal, CF = 1 or ZF).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JC">
<summary>
 Jump if Condition Is Met (Jump short if below, CF = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.JNBE">
<summary>
 Jump if Condition Is Met (Jump short if above, CF = 0 and ZF = 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IRETW">
<summary>
 Interrupt return (16-bit operand size).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IRETQ">
<summary>
 Interrupt return (64-bit operand size).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IRETD">
<summary>
 Interrupt return (32-bit operand size).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IRET">
<summary>
 Return from interrupt.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INVVPID">
<summary>
 Invalidate Translations Based on VPID.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INVPCID">
<summary>
 Invalidate Process-Context Identifier.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INVLPG">
<summary>
 Invalidate TLB Entries.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INVEPT">
<summary>
 Invalidate Translations Derived from EPT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INVD">
<summary>
 Invalidate Internal Caches.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INTO">
<summary>
 Call to Interrupt (InteInterrupt 4?if overflow flag is 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INT3">
<summary>
 Call to Interrupt (Interrupt 3?trap to debugger).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INT">
<summary>
 Call to Interrupt (Interrupt vector specified by immediate byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INSW">
<summary>
 Input from Port to String (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INSERTPS">
<summary>
 Insert Scalar Single-Precision Floating-Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INSD">
<summary>
 Input from Port to String (doubleword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INSB">
<summary>
 Input from Port to String (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INS">
<summary>
 Input from Port to String.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INCSSPQ">
<summary>
 Increment the shadow stack pointer (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INCSSPD">
<summary>
 Increment the shadow stack pointer (SSP).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.INC">
<summary>
 Increment by 1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IN">
<summary>
 Input from Port.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IMUL">
<summary>
 Signed Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.IDIV">
<summary>
 Signed Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.HSUBPS">
<summary>
 Packed Single-FP Horizontal Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.HSUBPD">
<summary>
 Packed Double-FP Horizontal Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.HLT">
<summary>
 Halt.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.HADDPS">
<summary>
 Packed Single-FP Horizontal Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.HADDPD">
<summary>
 Packed Double-FP Horizontal Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.GF2P8MULB">
<summary>
 Galois Field Multiply Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.GF2P8AFFINEQB">
<summary>
 Galois Field Affine Transformation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.GF2P8AFFINEINVQB">
<summary>
 Galois Field Affine Transformation Inverse.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.GETSEC">
<summary>
 GETSEC.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FYL2XP1">
<summary>
 compute y * log2(x+1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FYL2X">
<summary>
 compute y * log2x.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXTRACT">
<summary>
 Extract Exponent and Significand.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXSAVE64">
<summary>
 Save x87 FPU, MMX Technology, and SSE State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXSAVE">
<summary>
 Save x87 FPU, MMX Technology, and SSE State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXRSTOR64">
<summary>
 Restore x87 FPU, MMX, XMM, and MXCSR State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXRSTOR">
<summary>
 Restore x87 FPU, MMX, XMM, and MXCSR State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXCH">
<summary>
 Exchange Register Contents.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FXAM">
<summary>
 Examine ModR/M.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FWAIT">
<summary>
 Wait for FPU.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FUCOMPP">
<summary>
 Unordered Compare Floating Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FUCOMP">
<summary>
 Unordered Compare Floating Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FUCOMIP">
<summary>
 Compare Floating Point Values and Set EFLAGS and pop register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FUCOMI">
<summary>
 Compare Floating Point Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FUCOM">
<summary>
 Unordered Compare Floating Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FTST">
<summary>
 TEST.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSUBRP">
<summary>
 Reverse Subtract and pop register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSUBR">
<summary>
 Reverse Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSUBP">
<summary>
 Subtract and pop register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSUB">
<summary>
 Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSTSW">
<summary>
 Store x87 FPU Status Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSTP">
<summary>
 Store Floating Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSTENV">
<summary>
 Store x87 FPU Environment.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSTCW">
<summary>
 Store FPU control word after checking error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FST">
<summary>
 Store Floating Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSQRT">
<summary>
 Square Root.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSINCOS">
<summary>
 Sine and Cosine.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSIN">
<summary>
 Sine.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSCALE">
<summary>
 Scale.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FSAVE">
<summary>
 Store x87 FPU State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FRSTOR">
<summary>
 Restore x87 FPU State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FRNDINT">
<summary>
 Round to Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FPTAN">
<summary>
 Partial Tangent.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FPREM1">
<summary>
 Partial Remainder.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FPREM">
<summary>
 Partial Remainder.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FPATAN">
<summary>
 Partial Arctangent.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNSTSW">
<summary>
 Store FPU status word without checking error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNSTENV">
<summary>
 Store FPU environment without checking error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNSTCW">
<summary>
 Store x87 FPU Control Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNSAVE">
<summary>
 Save FPU state without checking error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNOP">
<summary>
 No Operation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNINIT">
<summary>
 Initialize FPU without checking error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FNCLEX">
<summary>
 Clear floating-point exception flags without checking for error conditions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FMULP">
<summary>
 Multiply and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FMUL">
<summary>
 Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDZ">
<summary>
 Load Constant (Push +0.0 onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDPI">
<summary>
 Load Constant (Push Pi onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDLN2">
<summary>
 Load Constant (Push loge2 onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDLG2">
<summary>
 Load Constant (Push log102 onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDL2T">
<summary>
 Load Constant (Push log210 onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDL2E">
<summary>
 Load Constant (Push log2e onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDENV">
<summary>
 Load x87 FPU Environment.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLDCW">
<summary>
 Load x87 FPU Control Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLD1">
<summary>
 Load Constant (Push +1.0 onto the FPU register stack).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FLD">
<summary>
 Load Floating Point Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FISUBR">
<summary>
 Reverse Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FISUB">
<summary>
 Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FISTTP">
<summary>
 Store Integer with Truncation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FISTP">
<summary>
 Store Integer and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FIST">
<summary>
 Store Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FINIT">
<summary>
 Initialize Floating-Point Unit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FINCSTP">
<summary>
 Increment Stack-Top Pointer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FIMUL">
<summary>
 Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FILD">
<summary>
 Load Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FIDIVR">
<summary>
 Reverse Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FIDIV">
<summary>
 Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FICOMP">
<summary>
 Compare Integer and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FICOM">
<summary>
 Compare Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FIADD">
<summary>
 Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FFREE">
<summary>
 Free Floating-Point Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FDIVRP">
<summary>
 Reverse Divide and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FDIVR">
<summary>
 Reverse Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FDIVP">
<summary>
 Divide and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FDIV">
<summary>
 Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FDECSTP">
<summary>
 Decrement Stack-Top Pointer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOS">
<summary>
 Cosine.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOMPP">
<summary>
 Compare Floating Point Values and pop register stack twice.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOMP">
<summary>
 Compare Floating Point Values and pop register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOMIP">
<summary>
 Compare Floating Point Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOMI">
<summary>
 Compare Floating Point Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCOM">
<summary>
 Compare Floating Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVU">
<summary>
 Floating-Point Conditional Move (if unordered (PF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVNU">
<summary>
 Floating-Point Conditional Move (if not unordered (PF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVNE">
<summary>
 Floating-Point Conditional Move (if not equal (ZF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVNBE">
<summary>
 FP Conditional Move (if not below or equal (CF = 0 and ZF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVNB">
<summary>
 Floating-Point Conditional Move (if not below (CF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVE">
<summary>
 Floating-Point Conditional Move (if equal (ZF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVBE">
<summary>
 Floating-Point Conditional Move (if below or equal (CF = 1 or ZF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCMOVB">
<summary>
 Floating-Point Conditional Move (if below (CF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCLEX">
<summary>
 Clear Exceptions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FCHS">
<summary>
 Change Sign.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FBSTP">
<summary>
 Store BCD Integer and Pop.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FBLD">
<summary>
 Load Binary Coded Decimal.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FADDP">
<summary>
 Add and pop the register stack.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FADD">
<summary>
 Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.FABS">
<summary>
 Absolute Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.F2XM1">
<summary>
 Compute 2x-1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.EXTRACTPS">
<summary>
 Extract Packed Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ENTER">
<summary>
 Make Stack Frame for Procedure Parameters.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ENDBR64">
<summary>
 Terminate an Indirect Branch in 64-bit Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ENDBR32">
<summary>
 Terminate an Indirect Branch in 32-bit and Compatibility Mode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ENCLU">
<summary>
 Execute an Enclave User Function of Specified Leaf Number.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ENCLS">
<summary>
 Execute an Enclave System Function of Specified Leaf Number.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.EMMS">
<summary>
 Empty MMX Technology State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DPPS">
<summary>
 Perform single-precision dot products for up to 4 elements and broadcast.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DPPD">
<summary>
 Perform double-precision dot product for up to 2 elements and broadcast.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DIVSS">
<summary>
 Divide Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DIVSD">
<summary>
 Divide Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DIVPS">
<summary>
 Divide Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DIVPD">
<summary>
 Divide Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DIV">
<summary>
 Unsigned Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DEC">
<summary>
 Decrement by 1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DAS">
<summary>
 Decimal Adjust AL after Subtraction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.DAA">
<summary>
 Decimal Adjust AL after Addition.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CWDE">
<summary>
 Convert Word to Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CWD">
<summary>
 Convert Word to Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTSS2SI">
<summary>
 Convert with Truncation Scalar Single-Precision FP Value to Dword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTSD2SI">
<summary>
 Convert with Truncation Scalar Double-Precision FP Value to Signed.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTPS2PI">
<summary>
 Convert with Truncation Packed Single-Precision FP Values to Packed Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTPS2DQ">
<summary>
 Convert with Truncation Packed Single-Precision FP Values to Packed Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTPD2PI">
<summary>
 Convert with Truncation Packed Double-Precision FP Values to Packed Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTTPD2DQ">
<summary>
 Convert with Truncation Packed Double-Precision FP Values to Packed Dword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSS2SI">
<summary>
 Convert Scalar Single-Precision FP Value to Dword Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSS2SD">
<summary>
 Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSI2SS">
<summary>
 Convert Dword Integer to Scalar Single-Precision FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSI2SD">
<summary>
 Convert Dword Integer to Scalar Double-Precision FP Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSD2SS">
<summary>
 Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTSD2SI">
<summary>
 Convert Scalar Double-Precision FP Value to Integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPS2PI">
<summary>
 Convert Packed Single-Precision FP Values to Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPS2PD">
<summary>
 Convert Packed Single-Precision FP Values to Packed Double-Precision FP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPS2DQ">
<summary>
 Convert Packed Single-Precision FP Values to Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPI2PS">
<summary>
 Convert Packed Dword Integers to Packed Single-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPI2PD">
<summary>
 Convert Packed Dword Integers to Packed Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPD2PS">
<summary>
 Convert Packed Double-Precision FP Values to Packed Single-Precision FP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPD2PI">
<summary>
 Convert Packed Double-Precision FP Values to Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTPD2DQ">
<summary>
 Convert Packed Double-Precision FP Values to Packed Dword Integers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTDQ2PS">
<summary>
 Convert Packed Dword Integers to Packed Single-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CVTDQ2PD">
<summary>
 Convert Packed Dword Integers to Packed Double-Precision FP Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CRC32">
<summary>
 Accumulate CRC32 Value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CQO">
<summary>
 Convert Quadword to Octaword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CPUID">
<summary>
 CPU Identification.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.COMISS">
<summary>
 Compare Scalar Ordered Single-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.COMISD">
<summary>
 Compare Scalar Ordered Double-Precision FP Values and Set EFLAGS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPXCHG8B">
<summary>
 Compare and Exchange Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPXCHG16B">
<summary>
 Compare and Exchange Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPXCHG">
<summary>
 Compare and Exchange.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPSW">
<summary>
 Compare String Operands (word).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPSS">
<summary>
 Compare scalar single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPSQ">
<summary>
 Compare String Operands (quadword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPSD">
<summary>
 Compare String Operands (dword) or Compare scalar dbl-precision FP values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPSB">
<summary>
 Compare String Operands (byte).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPPS">
<summary>
 Compare packed single-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMPPD">
<summary>
 Compare packed double-precision floating-point values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMP">
<summary>
 Compare Two Operands.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVZ">
<summary>
 Conditional Move (Move if zero (ZF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVS">
<summary>
 Conditional Move (Move if sign (SF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVP">
<summary>
 Conditional Move (Move if parity (PF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVO">
<summary>
 Conditional Move (Move if overflow (OF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVNZ">
<summary>
 Conditional Move (Move if not zero (ZF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVNS">
<summary>
 Conditional Move (Move if not sign (SF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVNP">
<summary>
 Conditional Move (Move if not parity (PF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVNO">
<summary>
 Conditional Move (Move if not overflow (OF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVNC">
<summary>
 Conditional move if not carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVLE">
<summary>
 Conditional Move (Move if less or equal (ZF = 1 or SF &lt;&gt; OF)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVL">
<summary>
 Conditional Move (Move if less (SF &lt;&gt; OF)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVGE">
<summary>
 Conditional Move (Move if greater or equal (SF = OF)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVG">
<summary>
 Conditional Move (Move if greater (ZF = 0 and SF = OF)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVC">
<summary>
 Conditional move if carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVBE">
<summary>
 Conditional Move (Move if below or equal (CF = 1 or ZF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVB">
<summary>
 Conditional Move (Move if below (CF = 1)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVAE">
<summary>
 Conditional Move (Move if above or equal (CF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMOVA">
<summary>
 Conditional Move (Move if above (CF = 0 and ZF = 0)).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CMC">
<summary>
 Complement Carry Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLTS">
<summary>
 Clear Task-Switched Flag in CR0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLRSSBSY">
<summary>
 Clear busy bit in a supervisor shadow stack token.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLI">
<summary>
 Clear Interrupt Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLFLUSHOPT">
<summary>
 Flush Cache Line Optimized.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLFLUSH">
<summary>
 Flush Cache Line.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLD">
<summary>
 Clear Direction Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLC">
<summary>
 Clear Carry Flag.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CLAC">
<summary>
 Clear AC Flag in EFLAGS Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CDQE">
<summary>
 Convert Doubleword to Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CDQ">
<summary>
 Convert Doubleword to Quadword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CBW">
<summary>
 Convert Byte to Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CALLNear">
<summary>
 Near call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.CALLFar">
<summary>
 Far call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BZHI">
<summary>
 Zero high bits starting from specified bit position.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BTS">
<summary>
 Bit Test and Set.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BTR">
<summary>
 Bit Test and Reset.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BTC">
<summary>
 Bit Test and Complement.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BT">
<summary>
 Bit Test.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BSWAP">
<summary>
 Byte Swap.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BSR">
<summary>
 Bit Scan Reverse.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BSF">
<summary>
 Bit Scan Forward.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BOUND">
<summary>
 Check Array Index Against Bounds.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDSTX">
<summary>
 Store bounds using address translation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDMOV">
<summary>
 Move Bounds.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDMK">
<summary>
 Create a LowerBound and a UpperBound in a register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDLDX">
<summary>
 Load Extended Bounds Using Address Translation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDCU">
<summary>
 Check Upper Bound.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDCN">
<summary>
 Check Upper Bound.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BNDCL">
<summary>
 Check the address of a memory reference against a LowerBound.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLSR">
<summary>
 Reset lowest set bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLSMSK">
<summary>
 Set all lower bits below first set bit to 1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLSI">
<summary>
 Extract lowest set bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLENDVPS">
<summary>
 Variable Blend Packed Single Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLENDVPD">
<summary>
 Variable Blend Packed Double Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLENDPS">
<summary>
 Blend Packed Single Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BLENDPD">
<summary>
 Blend Packed Double Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.BEXTR">
<summary>
 Contiguous bitwise extract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ARPL">
<summary>
 Adjust RPL Field of Segment Selector.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ANDPS">
<summary>
 Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ANDPD">
<summary>
 Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ANDNPS">
<summary>
 Bitwise Logical AND of Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ANDNPD">
<summary>
 Bitwise Logical AND of Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ANDN">
<summary>
 Bitwise AND of first source with inverted 2nd source operands.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AND">
<summary>
 Logical AND.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESKEYGENASSIST">
<summary>
 Assist the creation of round keys with a key expansion schedule.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESIMC">
<summary>
 Perform an inverse mix column transformation primitive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESENCLAST">
<summary>
 Perform Last Round of an AES Encryption Flow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESENC">
<summary>
 Perform an AES encryption round using an 128-bit state and a round key.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESDECLAST">
<summary>
 Perform Last Round of an AES Decryption Flow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AESDEC">
<summary>
 Perform an AES decryption round using an 128-bit state and a round key.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADOX">
<summary>
 Unsigned integer add with overflow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDSUBPS">
<summary>
 Packed Single-FP Add/Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDSUBPD">
<summary>
 Packed Double-FP Add/Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDSS">
<summary>
 Add Scalar Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDSD">
<summary>
 Add Scalar Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDPS">
<summary>
 Add Packed Single-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADDPD">
<summary>
 Add Packed Double-Precision Floating-Point Values.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADD">
<summary>
 Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADCX">
<summary>
 Unsigned integer add with carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.ADC">
<summary>
 Add with Carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AAS">
<summary>
 ASCII Adjust AL After Subtraction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AAM">
<summary>
 ASCII Adjust AX After Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AAD">
<summary>
 ASCII Adjust AX Before Division.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Opcode.AAA">
<summary>
 ASCII Adjust After Addition.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Opcode">
 <summary>
 Intel opcodes. This type should be generated using
 <c>scripts/genOpcode.fsx</c> from the `IntelSupportedOpcodes.txt` file.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.VEXInfo">
<summary>
 VEX information.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.REXPrefix">
<summary>
 REX Prefix.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.Prefixes">
<summary>
 Prefixes.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.PointerSize">
<summary>
 Size of the memory pointer in the instruction, i.e., how many bytes are
 required to represent a memory address. This field may hold a dummy value
 if there&apos;s no memory operand. This is mainly used for the lifting purpose
 along with the MainOperationSize.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.Operands">
<summary>
 Operands.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.Opcode">
<summary>
 Opcode.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction.MainOperationSize">
<summary>
 Size of the main operation performed by the instruction. This field is
 mainly used by our lifter, and we suggest not to use this field for
 analyzing binaries because there is some ambiguity in deciding the
 operation size when the instruction semantics are complex. We use this
 only for the purpose of optimizing the lifting process.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.MPref.MPrx66F2">
<summary>
 66 &amp; F2 prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.MPref.MPrxF2">
<summary>
 F2 prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.MPref.MPrxF3">
<summary>
 F3 prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.MPref.MPrx66">
<summary>
 66 prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.MPref.MPrxNP">
<summary>
 Indicates the use of 66/F2/F3 prefixes (beyond those already part of the
 instructions opcode) are not allowed with the instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.MPref">
<summary>
 Mandatory prefixes. The 66H, F2H, and F3H prefixes are mandatory for opcode
 extensions.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.VEXInfo">
<summary>
 Information about Intel vector extension.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.EVEXPrefix.B">
<summary>
 Broadcast/RC/SAE Context, P[20].
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.EVEXPrefix.Z">
<summary>
 Zeroing/Merging, P[23].
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.EVEXPrefix.AAA">
<summary>
 Embedded opmask register specifier, P[18:16].
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.ZeroingOrMerging">
<summary>
 Vector destination merging/zeroing: P[23] encodes the destination result
 behavior which either zeroes the masked elements or leave masked element
 unchanged.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.MemLookupType">
<summary>
 Intel&apos;s memory operand is represented by two tables (ModR/M and SIB table).
 Some memory operands do need SIB table lookups, whereas some memory operands
 only need to look up the ModR/M table.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.VEXType.EVEX">
<summary>
 EVEX Mask
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.VEXType.VEXThreeByteOpTwo">
<summary>
 Original VEX that refers to three-byte opcode map #2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.VEXType.VEXThreeByteOpOne">
<summary>
 Original VEX that refers to three-byte opcode map #1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.VEXType.VEXTwoByteOp">
<summary>
 Original VEX that refers to two-byte opcode map.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.VEXType">
<summary>
 Types of VEX (Vector Extension).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.SzCond.Nor">
<summary>
 Normal conditions. This includes all other size conditions in Table A-1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.SzCond.F64">
<summary>
 (f64) The operand size is forced to a 64-bit operand size when in 64-bit
 mode (prefixes that change operand size, e.g., 66 prefix, are ignored for
 this instruction in 64-bit mode).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.SzCond.D64">
<summary>
 (d64) When in 64-bit mode, instruction defaults to 64-bit operand size and
 cannot encode 32-bit operand size.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.SzCond">
<summary>
 Specific conditions for determining the size of operands.
 (See Table A-1, Appendix A.2.5 of Vol. 2D).
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operands">
<summary>
 A set of operands in an X86 instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Disp">
<summary>
 Displacement.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand.Label">
<summary>
 Label is *not* encoded in the actual binary. This is only used when we
 assemble binaries.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand.OprImm">
<summary>
 OprImm represents an immediate operand. The OperandSize here means the
 size of the encoded immediate value.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand.OprDirAddr">
<summary>
 OprDirAddr is a direct branch target address.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand.OprMem">
<summary>
 OprMem represents a memory operand. The OperandSize here means the memory
 access size of the operand, i.e., how many bytes do we read/write here.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand.OprReg">
<summary>
 A register operand.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Operand">
<summary>
 We define four different types of X86 operands:
 register, memory, direct address, and immediate.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.JumpTarget">
<summary>
 Jump target of a branch instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.ScaledIndex">
<summary>
 Scaled index.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Scale.X8">
<summary>
 Times 8
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Scale.X4">
<summary>
 Times 4
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Scale.X2">
<summary>
 Times 2
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Scale.X1">
<summary>
 Times 1
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Scale">
<summary>
 The scale of Scaled Index.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.OpGroup">
<summary>
 Opcode groups defined in manual Vol 2. Table A-6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG7">
<summary>
 BH/DI/EDI/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG6">
<summary>
 DH/SI/ESI/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG5">
<summary>
 CH/BP/EBP/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG4">
<summary>
 AH/SP/ESP/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG3">
<summary>
 BL/BX/EBX/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG2">
<summary>
 DL/DX/EDX/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG1">
<summary>
 CL/CX/ECX/...
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegGrp.RG0">
<summary>
 AL/AX/EAX/...
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.RegGrp">
<summary>
 We define 8 different RegGrp types. Intel instructions use an integer value
 such as a REG field of a ModR/M value.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWRXB">
<summary>
 REX.RXB + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWRX">
<summary>
 REX.RX + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWRB">
<summary>
 REX.RB + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWR">
<summary>
 REX.R + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWXB">
<summary>
 REX.XB + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWX">
<summary>
 REX.X + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXWB">
<summary>
 REX.B + Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXW">
<summary>
 Operand 64bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXRXB">
<summary>
 Extension of the ModR/M reg, SIB index, base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXRX">
<summary>
 Extension of the ModR/M reg, SIB index field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXRB">
<summary>
 Extension of the ModR/M reg, r/m field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXR">
<summary>
 Extension of the ModR/M reg field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXXB">
<summary>
 Extension of the ModR/M SIB index, base field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXX">
<summary>
 Extension of the SIB index field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REXB">
<summary>
 Extension of the ModR/M rm, SIB base, Opcode reg field.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.REX">
<summary>
 Extension of the ModR/M reg, Opcode reg field (SPL, BPL, ...).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.REXPrefix.NOREX">
<summary>
 No REX: this is to represent the case where there is no REX
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.REXPrefix">
<summary>
 REX prefixes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxADDRSIZE">
<summary>
 67H - Address-size override prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxOPSIZE">
<summary>
 Operand-size override prefix is encoded using 66H.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxGS">
<summary>
 GS segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxFS">
<summary>
 FS segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxES">
<summary>
 ES segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxDS">
<summary>
 DS segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxSS">
<summary>
 SS segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxCS">
<summary>
 CS segment prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxREPZ">
<summary>
 REP or REPE/REPZ is encoded using F3H.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxBND">
<summary>
 Bound prefix is encoded using F2H.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxREPNZ">
<summary>
 REPNE/REPNZ prefix is encoded using F2H.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxLOCK">
<summary>
 Lock prefix.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.Prefix.PrxNone">
<summary>
 No prefix.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Prefix">
<summary>
 Instruction prefixes.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.OprDesc">
<summary>
 Operand descriptor, which describes the shape of operands in an instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.IntelInstruction">
<summary>
 The internal representation for an Intel instruction used by our
 disassembler and lifter.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.IntelParser.prefixCheck">
<summary>
 Split a byte value into two fileds (high 3 bits; low 5 bits), and
 categorize prefix values into 8 groups based on the high 3 bits (= 2^3).
 The below array is a collection of bitmaps that maps the low 5-bit value
 to a bit value indicating whether the given byte value is a prefix value
 or not.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.IntelParser">
<summary>
 Parser for Intel (x86 or x86-64) instructions. Parser will return a
 platform-agnostic instruction type (Instruction).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.IntelTranslationContext.RegExprs@">
<summary>
 Register expressions.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.IntelTranslationContext.RegExprs">
<summary>
 Register expressions.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.IntelTranslationContext">
<summary>
 Translation context for Intel (x86 or x86-64) instructions.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.UnknownRegException">
<summary>
 This exception occurs when an UnknownReg is explicitly used. This exception
 should not happen in general.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.InvalidRegAccessException">
<summary>
 This is a fatal error that happens when B2R2 tries to access non-existing
 register symbol. This exception should not happen in general.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.RegGroup.grpEBX(System.Int32)">
<summary>
 Grp 3.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.RegGroup.grpEDX(System.Int32)">
<summary>
 Grp 2.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.RegGroup.grpECX(System.Int32)">
<summary>
 Grp 1.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.RegGroup.grpEAX(System.Int32)">
<summary>
 Grp 0.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.RegGroup">
<summary>
 This module defines sets of registers that are frequently grouped by Intel.
 Table 3-1. Register Codes Associated With +rb, +rw, +rd, +ro
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.OpMaskRegister">
<summary>
 OpMask registers of EVEX.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.PseudoRegister">
<summary>
 PseudoRegisters are the ones that we create to ease handling AVX
 registers and operations. Each AVX register is divided into a series of
 64-bit pseudoregisters, and we name each pseudoregister using a suffix
 character from &apos;A&apos; to &apos;H&apos;. For example, XMM0A refers to the first 64-bit
 chunk of XMM0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Unclassified">
<summary>
 Unclassified registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Flags">
<summary>
 Flags registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Bound">
<summary>
 Bound registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Debug">
<summary>
 Debug registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Control">
<summary>
 Control registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.SegBase">
<summary>
 Registers represeting a segment base.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.Segment">
<summary>
 Segment registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.ZMM">
<summary>
 ZMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.YMM">
<summary>
 YMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.XMM">
<summary>
 XMM registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.MMX">
<summary>
 MMX registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.FPU">
<summary>
 Floating-point registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind.GP">
<summary>
 General purpose registers.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.RegisterModule.Kind">
<summary>
 Intel register kind, which is based on their usage.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.RegisterModule">
<summary>
 This module exposes several useful functions to handle Intel registers.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzYDq">
<summary>
 VdqHdqEyIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqXz">
<summary>
 WdqVZxzIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqQq">
<summary>
 WdqVqqIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQXz">
<summary>
 VZxzRq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDXz">
<summary>
 VZxzRd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqdX">
<summary>
 VxWdqd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQqXzRM">
<summary>
 VZxzHxWqqIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQqXz">
<summary>
 WqqVZxz WZqqVZxzIb WqqVZxzIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqXz">
<summary>
 VZxzWdqq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqQq">
<summary>
 VqqWdqq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXzXz">
<summary>
 VZxzHxWZxz VZxzHxWZxzIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXzX">
<summary>
 VxWZxz
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXXz">
<summary>
 VZxzWx
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXqXz">
<summary>
 VZxzWxq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzPRM">
<summary>
 GvMp
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzP">
<summary>
 Ap Ep Mp
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqX">
<summary>
 VxHxWdqq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqdXz">
<summary>
 VZxzWdqd VxHxWdqd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDX">
<summary>
 VxMd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzS">
<summary>
 Ms
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQ">
<summary>
 NqIb Mq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzBV">
<summary>
 GvEb Mb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDbDq">
<summary>
 VdqEdbIb VdqHdqEdbIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqbX">
<summary>
 VxWdqb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqQqq">
<summary>
 VqqMdq VqqHqqWdqIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqwX">
<summary>
 VxWdqwd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqwDq">
<summary>
 VdqWdqw
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqddqX">
<summary>
 VxWdqdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqdqX">
<summary>
 VxWdqqdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXD">
<summary>
 GdUx
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqX">
<summary>
 VxHxWdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqd">
<summary>
 GdUdqIb GdUdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQD">
<summary>
 GdNqIb GdNq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDwDqMR">
<summary>
 EdwVdqIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDwDq">
<summary>
 VdqEdwIb VdqHdqEdwIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDwQ">
<summary>
 PqEdwIb
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzYQRM">
<summary>
 PqEy
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzYQ">
<summary>
 EyPq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQQ">
<summary>
 PqQq PqQqIb QqPq MqPq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDQ">
<summary>
 PqQd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDq">
<summary>
 UdqIb Mdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqY">
<summary>
 GyUdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqY">
<summary>
 GyWdqq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqdY">
<summary>
 GyWdqd
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqQ">
<summary>
 PpiWdq PqUdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqQ">
<summary>
 PpiWdqq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzQDq">
<summary>
 VdqQpi VdqNq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDY">
<summary>
 RyCd RyDd CdRy DdRy
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzVyDqMR">
<summary>
 EyVdq MibBN
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzVyDq">
<summary>
 BNEv BNMv BNMib VdqEy VssHssEy VsdHsdEy
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqDqWS">
<summary>
 BNBNdqq BNdqqBN
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzXqX">
<summary>
 VxWxq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqDqMR">
<summary>
 WdqqVdq MqVdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqqDq">
<summary>
 VdqWdqq VdqMq VdqHdqMq VdqHdqWdqq VdqWdqqIb WdqqVdq MqVdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqdDqMR">
<summary>
 WdqdVdq MdVdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqdDq">
<summary>
 VdqWdqd VdqMd VdqHdqWdqd VdqWdqdIb MdVdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDqDq">
<summary>
 MdqVdq VdqHdqUdq VdqHdqWdqIb VdqMdq VdqUdq VdqWdq VdqWdqIb WdqVdq
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzPZ">
<summary>
 GzMp
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzD64">
<summary>
 RAX RCX RDX RBX RSP RBP RSI RDI Jz
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzWV">
<summary>
 GvEw
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzRegW">
<summary>
 CS ES DS FS GS SS
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzMemW">
<summary>
 Ew Mw
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzD">
<summary>
 Md
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDV">
<summary>
 GvEd Md
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzVecDef">
<summary>
 HxUxIb MpdVpd MpsVps MxVx MZxzVZxz VpdHpdWpd VpdHpdWpdIb VpdWpd VpsHpsWps
 VpsHpsWpsIb VpsWps VsdHsdWsdIb VssHssWssIb VxHxWsd VxHxWss VxHxWx VxHxWxIb
 VxMx VxWx VxWxIb VZxzWZxz WpdVpd WpsVps WsdHxVsd WssHxVss WxVx WZxzVZxz
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzDef">
<summary>
 ALDX DXAL DXEAX EAX EAXDX EAXIb EBP EBX ECX EDI EDX ESI ESP Ev Ev1 EvCL EvGv
 EvGvCL EvGvIb EvIb EvSIb EvSIz EyGy GvEv GvEvSIb GvEvSIz GvEy GvMa GvMv
 GyByEy GyEy GyEyBy GyEyIb GyMy Ib IbEAX Iw IwIb Mv MyGy Mz OvRAX RAXIv RAXOv
 RAXrAX RAXrBP RAXrBX RAXrCX RAXrDI RAXrDX RAXrSI RAXrSP RAXSIz RAXz RBPIv
 RBPz RBXIv RBXz RCXIv RCXz RDIIv RDIz RDXIv RDXz RSIIv RSIz RSPIv RSPz Rv Ry
 SIb SIz
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzWord">
<summary>
 GwMw EvSw EwGw MwGw SwEw
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.Helper.SzByte">
<summary>
 AHR12LIb ALIb ALOb ALR8LIb BHR15LIb BLR11LIb CHR13LIb CLR9LIb DHR14LIb
 DLR10LIb Eb Eb1 EbCL EbGb EbIb GbEb IbAL Jb ObAL XbYb
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.Helper.clearGrp1PrefMask">
<summary>
 Filter out group 1 prefixes.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.Helper.clearVEXPrefMask">
<summary>
 Filter out PrxREPNZ(0x2), PrxREPZ(0x8), and PrxOPSIZE(0x400).
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Intel.Helper.clearSegMask">
<summary>
 Filter out segment-related prefixes.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.parseMEM32(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,System.Byte)">
<summary>
 The first 24 rows of Table 2-2. of the manual Vol. 2A.
 The index of this tbl is a number that is a concatenation of (mod) and
 (r/m) field of the ModR/M byte. Each element is a tuple of (MemLookupType,
 and the size of the displacement). If the first value of the tuple (register
 group) is None, it means we need to look up the SIB tbl (Table 2-3). If
 not, then it represents the reg group of the base reigster.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.parseOprRIPRelativeMem(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,System.Int32)">
<summary>
 RIP-relative addressing (see Section 2.2.1.6. of Vol. 2A).
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.getSIBBaseReg(System.Int32,B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,System.Byte)">
<summary>
 See Notes 1 of Table 2-3 of the manual Vol. 2A
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.parseMEM16(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,System.Byte)">
<summary>
 The first 24 rows of Table 2-1. of the manual Vol. 2A.
 The index of this tbl is a number that is a concatenation of (mod) and
 (r/m) field of the ModR/M byte. Each element is a tuple of base register,
 scaled index register, and the size of the displacement.
 Table for scales (of SIB). This tbl is indexbed by the scale value of SIB.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.compressDisp(Microsoft.FSharp.Core.FSharpOption{B2R2.FrontEnd.BinLifter.Intel.VEXInfo},System.Int64)">
<summary>
 EVEX uses compressed displacement. See the manual Chap. 15 of Vol. 1.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.findRegNoREX(System.Int32,B2R2.FrontEnd.BinLifter.Intel.REXPrefix,System.Int32)">
<summary>
 Registers defined by REG bit of the opcode: some instructions such as PUSH
 make use of its opcode to represent the REG bit. REX bits *cannot* change
 the symbol.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.findRegRBits(System.Int32,B2R2.FrontEnd.BinLifter.Intel.REXPrefix,System.Int32)">
<summary>
 Registers defined by REG field of the ModR/M byte.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.findRegRmAndSIBBase(System.Int32,B2R2.FrontEnd.BinLifter.Intel.REXPrefix,System.Int32)">
<summary>
 Registers defined by the SIB base field, or base registers defined by the
 RM field (first three rows of Table 2-2), or registers defined by REG bit
 of the opcode, which can change the symbol by REX bits.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.findRegSIBIdx(System.Int32,B2R2.FrontEnd.BinLifter.Intel.REXPrefix,System.Int32)">
<summary>
 Registers defined by the SIB index field.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.OperandParsingHelper.findReg(System.Int32,B2R2.FrontEnd.BinLifter.Intel.REXPrefix,System.Int32,System.Int32)">
<summary>
 Find a specific reg. The bitmask will be used to extract a specific REX
 bit (R/X/B).
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.Disasm.maskRegToString``1(B2R2.FrontEnd.BinLifter.Intel.EVEXPrefix,B2R2.FrontEnd.BinLifter.DisasmBuilder{``0})">
<summary>
 Opmask register
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.Disasm.maskZtoString``1(B2R2.FrontEnd.BinLifter.Intel.EVEXPrefix,B2R2.FrontEnd.BinLifter.DisasmBuilder{``0})">
<summary>
 Zeroing/Merging (EVEX.z)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.LiftingUtils.dstAssign(System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 This is an Intel-specific assignment to a destination operand.
 Unlike typical assignments, this function performs zero-padding when
 necessary (See Intel Manual 3.4.1.1).
 In 64-bit mode, operand size determines the number of valid bits.
 64-bit operands generate a 64-bit result in the destination general-purpose
 register. 32-bit operands generate a 32-bit result, zero-extended to a
 64-bit result in the destination general-purpose register. 8-bit and 16-bit
 operands generate 8-bit or 16-bit result. The upper 56 or 48 bits
 (respectively) of the destination general-purpose register are not modified.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.LiftingUtils.transJumpTargetOpr(B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction,B2R2.BinIR.LowUIR.Expr,System.UInt32,B2R2.FrontEnd.BinLifter.TranslationContext)">
<summary>
 Return a tuple (jump target expr, is pc-relative?)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.GeneralLifter.ofOnSub(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 OF on sub.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.GeneralLifter.ofOnAdd(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 OF on add.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.GeneralLifter.cfOnSub(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 CF on sub.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.GeneralLifter.cfOnAdd(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 CF on add.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Intel.SSELifter.Imm8ControlByte">
<summary>
 XXX (cleanup required)
 imm8 control byte operation for PCMPESTRI, PCMPESTRM, etc..
 See Chapter 4.1 of the manual vol. 2B.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.Lifter.translate(B2R2.FrontEnd.BinLifter.Intel.IntelInternalInstruction,System.UInt32,B2R2.FrontEnd.BinLifter.TranslationContext)">
<summary>
 Translate IR.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseThreeByteOp2(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper)">
<summary>
 When the first two bytes are 0F3A.
 Table A-5 of Volume 2 (Three-byte Opcode Map : First Two Bytes are 0F 3AH)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseThreeByteOp1(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper)">
<summary>
 When the first two bytes are 0F38.
 Table A-4 of Volume 2 (Three-byte Opcode Map : First Two Bytes are 0F 38H)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseBND(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,B2R2.FrontEnd.BinLifter.Intel.SzCond,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Parse BND-related instructions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.pVEXByMem(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Parse non-VEX instructions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseNonVEX(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Parse non-VEX instructions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseEVEXW(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 VEX/EVEX (Both REX.W)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.selectEVEXW``1(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0})">
<summary>
 VEX(REX.W), EVEX(REX.W)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseEVEX(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Normal/VEX/EVEX (EVEX REX.W)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.selectEVEX``1(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,``0})">
<summary>
 Normal(REX.W), VEX(REX.W)
 Normal, VEX, EVEX(REX.W)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseVEXW(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Normal/VEX (Both REX.W)
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseVEX(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}},Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.Intel.MPref,System.ValueTuple{B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind}})">
<summary>
 Normal/VEX
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.parseGrpOp(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,B2R2.FrontEnd.BinLifter.Intel.OpGroup,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind)">
<summary>
 Parse group Opcodes: Vol.2C A-19 Table A-6. Opcode Extensions for One- and
 Two-byte Opcodes by Group Number.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.render(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper,B2R2.FrontEnd.BinLifter.Intel.Opcode,B2R2.FrontEnd.BinLifter.Intel.SzCond,B2R2.FrontEnd.BinLifter.Intel.OprDesc,B2R2.FrontEnd.BinLifter.Intel.Helper.SizeKind)">
<summary>
 The main instruction rendering function.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.filterPrefs(B2R2.FrontEnd.BinLifter.Intel.Prefix)">
<summary>
 Some instructions use 66/F2/F3 prefix as a mandatory prefix. When both
 VEX.pp and old-style prefix are used, the VEX.pp is used to select the
 opcodes. But if VEX.pp does not exist, then we have to use the old-style
 prefix, and we have to filter out the prefixes because they are not going
 to be used as a normal prefixes. They will only be used as a mandatory
 prefix to decide the opcode.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.addBND(B2R2.FrontEnd.BinLifter.Intel.Helper.ReadHelper)">
<summary>
 Add BND prefix (Intel MPX extension).
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Intel.ParsingHelper.notEn``2(``0)">
<summary>
 Not Encodable
</summary>
</member>
</members>
</doc>
