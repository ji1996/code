<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.FrontEnd.BinLifter.Core</name></assembly>
<members>
<member name="M:B2R2.FrontEnd.BinLifter.IRBuilder.ToStmts">
 <summary>
   Create an array of IR statements from the buffer.
 </summary>
 <returns>
   Returns a list of IR statements.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.IRBuilder.NewTempVar(System.Int32)">
 <summary>
   Create a new temporary variable of RegType (rt).
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.IRBuilder.NewSymbol(System.String)">
 <summary>
   Create a new symbol for a label.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.IRBuilder.Append(B2R2.BinIR.LowUIR.Stmt)">
 <summary>
   Append a new IR statement to the builder.
 </summary>
 <param name="stmt">IR statement to add.</param>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.IRBuilder.#ctor(System.Int32)">
 <summary>
   Initialize an IR statement builder of internal buffer size n.
 </summary>
 <param name="n">The size of the internal buffer.</param>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.IRBuilder">
<summary>
 IRBuilder accumulates IR statements while lifting, and emits them into an
 array of statements at the end of a lifting process.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.TranslationContext.Endianness@">
<summary>
 The endianness.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.TranslationContext.WordBitSize@">
<summary>
 Word size in bits (RegType).
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.TranslationContext.WordBitSize">
<summary>
 Word size in bits (RegType).
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.TranslationContext.Endianness">
<summary>
 The endianness.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.TranslationContext.GetRegVar(System.Int32)">
 <summary>
   Get register expression from a given register ID.
 </summary>
 <param name="id">Register ID.</param>
 <returns>
   Returns an IR expression of a register.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.TranslationContext.GetPseudoRegVar(System.Int32,System.Int32)">
 <summary>
   Get pseudo register expression from a given register ID and an index.
 </summary>
 <param name="id">Register ID.</param>
 <param name="idx">Register index.</param>
 <returns>
   Returns an IR expression of a pseudo-register.
 </returns>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.TranslationContext">
<summary>
 A high-level interface for the translation context, which stores several
 states for translating/lifting instructions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.AsmWordBuilder.Finish">
 <summary>
   Create an array of AsmWords from the buffer.
 </summary>
 <returns>
   Returns an array of AsmWords.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.AsmWordBuilder.Append(B2R2.FrontEnd.BinLifter.AsmWord)">
 <summary>
   Append a new AsmWord to the builder.
 </summary>
 <param name="stmt">AsmWord to add.</param>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.AsmWordBuilder.#ctor(System.Int32)">
 <summary>
   Initialize an IR statement builder of internal buffer size n.
 </summary>
 <param name="n">The size of the internal buffer.</param>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.AsmWordBuilder">
<summary>
 Builder for an array of AsmWords.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.AsmWord">
<summary>
 We divide an assembly statement into a series of AsmWord, which represents a
 word (string) in the statement.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.AsmWordKind.String">
<summary>
 A simple string that can be ignored.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.AsmWordKind.Value">
<summary>
 A value (such as an immediate).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.AsmWordKind.Variable">
<summary>
 An variable (such as a register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.AsmWordKind.Mnemonic">
<summary>
 An opcode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.AsmWordKind.Address">
<summary>
 An address of the given instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.AsmWordKind">
<summary>
 A kind of a term within an assembly statement.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.RegisterBay.StackPointer">
 <summary>
 Return a stack pointer register for a given BinHandle.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.RegisterBay.ProgramCounter">
 <summary>
 Return a program counter register for a given BinHandle.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.RegisterBay.FramePointer">
 <summary>
 Return a frame pointer register for a given BinHandle.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.StrToRegExpr(System.String)">
<summary>
 Return RegExpr from a string.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegTypeFromRegExpr(B2R2.BinIR.LowUIR.Expr)">
<summary>
 Return RegType from a given RegExpr.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegIDToString(System.Int32)">
 <summary>
 Return a register string from a given RegisterID. Depending on the
 underlying architecture of the BinHandle, we may have a different string
 result.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegIDToRegType(System.Int32)">
 <summary>
 Return a RegType from a given RegisterID.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegIDToRegExpr(System.Int32)">
<summary>
 Return RegExpr from a given RegID.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegIDFromString(System.String)">
 <summary>
 Return RegisterID from a given register string. Depending on the
 underlying architecture of the BinHandle, we may have different
 RegisterID.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.RegIDFromRegExpr(B2R2.BinIR.LowUIR.Expr)">
<summary>
 Return RegID from a given RegExpr.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.IsStackPointer(System.Int32)">
 <summary>
 Check if the given RegisterID represents a stack pointer.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.IsProgramCounter(System.Int32)">
 <summary>
 Check if the given RegisterID represents PC.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.IsFramePointer(System.Int32)">
 <summary>
 Check if the given RegisterID represents a frame pointer.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.GetRegisterAliases(System.Int32)">
 <summary>
 Return an array of aliases of a given register based on the current
 architecture of BinHandle.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.GetGeneralRegExprs">
<summary>
 Return all general register expressions excluding FPU registers, vector
 registers, etc.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.GetAllRegNames">
<summary>
 Return all register names.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.RegisterBay.GetAllRegExprs">
<summary>
 Return all register expressions.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.RegisterBay">
<summary>
 RegisterBay provides a useful interface for accessing register information
 in a platform-agnostic manner.
</summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Instruction.WordSize@">
 <summary>
   The word size used for translating this instruction. Some architectures
   have several representations of their instruction sets depending on the
   word size. For example, Intel can be represented as either x86 or x86-64
   depending on the word size used. We store this information per
   instruction to distinguish specific instruction sets used.
 </summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Instruction.Length@">
 <summary>
   The length of this instruction in bytes.
 </summary>
</member>
<member name="F:B2R2.FrontEnd.BinLifter.Instruction.Address@">
 <summary>
   The address of this instruction.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Instruction.WordSize">
 <summary>
   The word size used for translating this instruction. Some architectures
   have several representations of their instruction sets depending on the
   word size. For example, Intel can be represented as either x86 or x86-64
   depending on the word size used. We store this information per
   instruction to distinguish specific instruction sets used.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Instruction.Length">
 <summary>
   The length of this instruction in bytes.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Instruction.Address">
 <summary>
   The address of this instruction.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.Translate(B2R2.FrontEnd.BinLifter.TranslationContext)">
 <summary>
   Lift this instruction into a LowUIR given a translation context.
 </summary>
 <param name="ctxt">Translation context.</param>
 <returns>
   Returns an array of LowUIR statements.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsRET">
 <summary>
   Is this a return instruction?
 </summary>
 <returns>
   Returns true if this is a return instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsNop">
 <summary>
   Is this a NO-OP instruction?
 </summary>
 <returns>
   Returns true if this instruction is a NO-OP.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsModeChanging">
 <summary>
   Is this a mode-changing instruction? In ARMv7, BLX is such an
   instruction.
 </summary>
 <returns>
   Returns true if this is a mode-changing instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsInterrupt">
 <summary>
   Does this instruction involve an interrupt?
 </summary>
 <returns>
   Returns true if this is an interrupt instruction
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsIndirectBranch">
 <summary>
   Is this an indirect branch instruction? An indirect branch instruction
   is a branch instruction with a symbolic jump target. Thus, the jump
   target is only computed at runtime.
 </summary>
 <returns>
   Returns true if this is an indirect branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsExit">
 <summary>
   Does this instruction exits the program execution? For example, this
   function returns true for the <c>HLT</c> instruction of Intel. We also
   consider returning from kernel mode to user mode (e.g. <c>SYSEXIT</c>
   instruction of Intel) as an exit.
 </summary>
 <returns>
   Returns true if this instruction should be at the end of the
   corresponding basic block.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsDirectBranch">
 <summary>
   Is this a direct branch instruction? A direct branch instruction is a
   branch instruction with a concrete jump target, which is inscribed in
   its operand. For example, <c>CALL ECX</c> is not a direct branch
   instruction, but <c>JMP +10</c> is.
 </summary>
 <returns>
   Returns true if this is a direct branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsCondBranch">
 <summary>
   Is this a conditional branch instruction?
 </summary>
 <returns>
   Returns true if this is a conditional branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsCall">
 <summary>
   Is this a call instruction?
 </summary>
 <returns>
   Returns true if this is a call instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsCJmpOnTrue">
 <summary>
   Is this a conditional branch instruction, and it jumps to the branch
   target when the predicate is true? For example, this method returns true
   for <c>JE</c> instructions of Intel, but false for <c>JNE</c>
   instructions.
 </summary>
 <returns>
   Returns true if this is a conditional branch instruction, and jumps to
   the target when the predicate is true.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsBranch">
 <summary>
   Is this a branch instruction? A branch instruction includes any kinds of
   jump instructions, such as CALL/RET instructions, indirect/direct jump
   instructions, and conditional jump instructions.
 </summary>
 <returns>
   Returns true if this is a branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IsBBLEnd">
 <summary>
   Does this instruction end a basic block? For example, this function
   returns true for branch instructions and exit instructions. We also
   consider system call instructions as an end of basic blocks.
 </summary>
 <returns>
   Returns true if this instruction should be at the end of the
   corresponding basic block.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.InterruptNum(Microsoft.FSharp.Core.byref{System.Int64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return the interrupt number if this is an interrupt instruction.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.IndirectTrampolineAddr(Microsoft.FSharp.Core.byref{System.UInt64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return a trampoline address of an indirect branch instruction if we can
   directly compute the address. For example, `JMP [RIP + 0x42]` is an
   indirect branch instruction, but we can compute the trampoline address
   as RIP is statically known anyways when PIC is off.
 </summary>
 <returns>
   Returns true if a trampoline address exists. Otherwise, returns false.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.GetNextInstrAddrs">
 <summary>
   Return a sequence of possible next instruction addresses along with
   their ArchOperationMode. For branch instructions, the returned sequence
   includes jump target(s). For regular instructions, the sequence is a
   singleton of the fall-through address. This function does not resolve
   indirect branch targets.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.Disasm">
 <summary>
   Disassemble this instruction without resolving symbols.
 </summary>
 <returns>
   Returns a disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.Disasm(System.Boolean,System.Boolean,B2R2.FrontEnd.BinLifter.DisasmHelper)">
 <summary>
   Disassemble this instruction.
 </summary>
 <param name="showAddr">
   Whether to show the instruction address in the resulting disassembly.
 </param>
 <param name="resolveSymbol">
   Whether to resolve symbols while disassembling the instruction. For
   example, when there is a call target, we the disassembled string will
   show the target function name if this parameter is true, and the symbol
   information exists.
 </param>
 <param name="disasmHelper">
   The helper allows our disassembler to resolve symbols.
 </param>
 <returns>
   Returns a disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.DirectBranchTarget(Microsoft.FSharp.Core.byref{System.UInt64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return a branch target address if we can directly compute it, i.e., for
   direct branches.
 </summary>
 <returns>
   Returns true if a target address exists. Otherwise, returns false.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Instruction.Decompose(System.Boolean)">
 <summary>
   Decompose this instruction into AsmWords.
 </summary>
 <returns>
   Returns an array of AsmWords.
 </returns>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Instruction">
 <summary>
   A high-level class representing a single machine instruction in a
   platform-independent manner. It provides useful methods for accessing
   useful information about the instruction.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Parser.OperationMode(B2R2.ArchOperationMode)">
<summary>
 The current operation mode of the Parser. This is only useful for ARMv7
 parsers.
</summary>
</member>
<member name="P:B2R2.FrontEnd.BinLifter.Parser.OperationMode">
<summary>
 The current operation mode of the Parser. This is only useful for ARMv7
 parsers.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.Parser.Parse(B2R2.BinReader,System.UInt64,System.Int32)">
<summary>
 Parse one instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.Parser">
<summary>
 A platform-independent instruction parser.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.BitData32">
<summary>
 32-bit binary representation.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.ParsingFailureException">
<summary>
 This exception occurs when parsing binary code failed. This exception
 indicates a non-recoverable parsing failure.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.UnhandledRegExprException">
<summary>
 Encountered register expression that is yet handled in our IR.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.InvalidRegisterException">
<summary>
 Invalid register has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.InvalidOpcodeException">
<summary>
 Invalid opcode has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.InvalidOperandSizeException">
<summary>
 Invalid operand size has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.InvalidOperandException">
<summary>
 Invalid use of operand has been encountered during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BinLifter.NotImplementedIRException">
<summary>
 The IR is not implemented yet.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.LiftingOperators.op_BangQmark``1(B2R2.FrontEnd.BinLifter.IRBuilder,Microsoft.FSharp.Core.FSharpFunc{B2R2.FrontEnd.BinLifter.IRBuilder,``0})">
<summary>
 The special operator for applying a function with a IRBuilder as input.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.LiftingOperators.op_BangGreater(B2R2.FrontEnd.BinLifter.IRBuilder,System.UInt32)">
<summary>
 The special operator for finishing an instruction (IEMark).
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.LiftingOperators.op_BangLess(B2R2.FrontEnd.BinLifter.IRBuilder,System.UInt32)">
<summary>
 The special operator for starting an instruction (ISMark).
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.LiftingOperators.op_BangMultiply(B2R2.FrontEnd.BinLifter.IRBuilder,System.Int32)">
<summary>
 The special operator for creating a temporary variable.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinLifter.LiftingOperators.op_BangBang(B2R2.FrontEnd.BinLifter.IRBuilder,B2R2.BinIR.LowUIR.Stmt)">
<summary>
 This is the special operator that we use for writing a lifter. There are
 several major operators we use including this one. This one simply appends a
 statement to the IRBuilder. We always put a IRBuilder variable immediately
 after each operator without any space to make it visually distinct. For
 example, for a builder variable &quot;ir&quot;, we write a lifting logic as follows:
 !&lt;ir insAddr insLen
 !!ir (t1 := v1 .+ v2)
 !!ir (t2 := t1 .* t1)
 !&gt;ir insAddr insLen
</summary>
</member>
</members>
</doc>
