<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.MiddleEnd.BinGraph</name></assembly>
<members>
<member name="P:B2R2.MiddleEnd.BinGraph.Vertex`1.VData">
<summary>
 Data attached to the vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Vertex`1.IsDummy">
<summary>
 Check whether vertex is a dummy node.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Vertex`1.GetID``1(B2R2.MiddleEnd.BinGraph.Vertex{``0})">
<summary>
 Return the ID of the given vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Vertex`1.GetID">
<summary>
 Each vertex has a unique ID attached to it. We sometimes need to access ID
 of dummy vertex for example calculating dominators.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Vertex`1.#ctor(`0)">
<summary>
 Create a regular vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Vertex`1.#ctor">
<summary>
 Create a dummy vertex.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.Vertex`1">
<summary>
 A vertex of a graph. The vertex data (v) is optional, and if it is None, we
 will consider the vertex as a dummy node. Dummy nodes are useful for
 representing entry/exit node in a CFG.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.VertexData">
<summary>
 A data type for vertex. A VertexData should have an ID.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.VertexID">
<summary>
 A unique ID for a vertex.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.Edge`1">
<summary>
 An edge in a directed graph.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.EdgeID">
<summary>
 Edge ID is a tuple of two node IDs (source node ID, destination node ID).
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Graph`3.ImplementationType">
<summary>
 Graph implementation type.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.TryFindVertexByID(System.Int32)">
<summary>
 Find a vertex by its VertexID. This function returns an Option type.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.TryFindVertexByData(`0)">
<summary>
 Find a vertex that has the given VertexData from the graph. This function
 does not raise an exception unlike FindVertexByData.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.TryFindVertexBy(Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.Boolean})">
<summary>
 Find a vertex by the given function without raising an exception.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.ToDOTStr(System.String,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.String},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Edge{`1},System.String})">
<summary>
 Return the DOT-representation of this graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.SubGraph(Microsoft.FSharp.Collections.FSharpSet{B2R2.MiddleEnd.BinGraph.Vertex{`0}})">
<summary>
 Return a subgraph that contains only the set of vertices.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.RemoveVertex(B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Remove the given vertex from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.RemoveEdge(B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Remove the edge that spans from src to dst.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.IterVertex(Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.Unit})">
<summary>
 Iterate every vertex (the order can be arbitrary).
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.IterEdge(Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{`1,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Fold every edge in the graph (the order can be arbitrary).
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.IsEmpty">
<summary>
 Is this empty? A graph is empty when there is no vertex in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.GetVertices">
<summary>
 Get a set of all vertices in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.GetSize">
<summary>
 Number of vertices.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FoldVertex``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},``0}},``0)">
<summary>
 Fold every vertex (the order can be arbitrary).
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FoldEdge``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{`1,``0}}}},``0)">
<summary>
 Fold every edge in the graph (the order can be arbitrary).
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FindVertexByID(System.Int32)">
<summary>
 Find a vertex by its VertexID. This function raises an exception when
 there is no such a vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FindVertexByData(`0)">
<summary>
 Find a vertex that has the given VertexData from the graph. It will raise
 an exception if such a vertex does not exist. Note that this function can
 be used only when each vertex always has unique VertexData.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FindVertexBy(Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.Boolean})">
<summary>
 Find a vertex by the given function. This function returns the first
 element, in which the function returns true. When there is no such an
 element, the function raises an exception.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.FindEdgeData(B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Find the data of the edge that spans from src to dst.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.ExistsVertex(System.Int32)">
<summary>
 Check the existence of the given vertex from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.Clone">
<summary>
 Clone the graph and create a new one.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.AddVertex(`0)">
<summary>
 Add a vertex into the graph, and return a reference to the added vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Graph`3.AddEdge(B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0},`1)">
<summary>
 Add an edge from src to dst.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.Graph`3">
<summary>
 The top-level graph data type. This one can be both directed or undirected.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.GraphImplementationType">
<summary>
 Either persistent or imperative graph.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.GraphCore`3">
<summary>
 GraphCore is an internal representation for the core graph operations, and
 this should not be directly accessed by the user.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.TryFindVertexByID(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},System.Int32)">
<summary>
 Try to find vertex by VertexID.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.TryFindVertexByData(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},`0)">
<summary>
 Try to find vertex by given data.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.TryFindVertexBy(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.Boolean})">
<summary>
 Try to find vertex by given data.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.TryFindEdgeData(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Try to find an edge and return the data attached to it.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.ToDOTStr(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},System.String,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.String},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Edge{`1},System.String})">
<summary>
 Return a DOT-formatted string from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.SubGraph(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Collections.FSharpSet{B2R2.MiddleEnd.BinGraph.Vertex{`0}})">
<summary>
 Return a subgraph of the given vertices.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.Reverse(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Create a reverse graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.RemoveVertex(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Remove a vertex from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.RemoveEdge(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Remove an edge from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.IterVertex(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.Unit})">
<summary>
 Iterate vertices in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.IterEdge(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{`1,Microsoft.FSharp.Core.Unit}}})">
<summary>
 Iterate edges in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.IsEmpty(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Check if the graph is empty.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetVertices(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Get the whole set of vertices from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetUnreachables(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Get unreachable nodes from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetSuccs(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Get the successors of the given vertex in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetSize(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Get the number of vertices of the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetPreds(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Get the predecessors of the given vertex in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.GetExits(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Get leaf (exit) nodes from the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FoldVertex``1(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},``0}},``0)">
<summary>
 Fold vertices in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FoldEdge``1(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},Microsoft.FSharp.Core.FSharpFunc{`1,``0}}}},``0)">
<summary>
 Fold edges in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FindVertexByID(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},System.Int32)">
<summary>
 Find vertex by VertexID. This function raises an exception when the given
 ID does not exist in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FindVertexByData(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},`0)">
<summary>
 Find vertex by given data. This function raises an exception when there is
 no matching vertex in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FindVertexBy(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{`0},System.Boolean})">
<summary>
 Find vertex by the given predicate. This function raises an exception when
 there is no matching vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.FindEdgeData(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Find an edge and return the data attached to it. This function raises an
 exception when there is no matching edge.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.ExistsVertex(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},System.Int32)">
<summary>
 Check if the given vertex exists in the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.Clone(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Clone a graph. For imperative graphs, this function involves deep copying.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.AddVertex(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},`0)">
<summary>
 Add a vertex to the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.AddEdge(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0},`1)">
<summary>
 Add an edge to the graph.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.AddDummyVertex(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1})">
<summary>
 Add a dummy vertex to the graph. Dummy nodes are necessary when we run
 some graph algorithms, and such nodes should be removed appropriately
 before we return the final results.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DiGraph`2.AddDummyEdge(B2R2.MiddleEnd.BinGraph.DiGraph{`0,`1},B2R2.MiddleEnd.BinGraph.Vertex{`0},B2R2.MiddleEnd.BinGraph.Vertex{`0})">
<summary>
 Add an edge to the graph without attaching data to it.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.DiGraph`2">
<summary>
 Directedg graph inehrited from Graph. This type is mostly used by primary
 graph algorithms, such as the dominator algorithm. We only expose static
 members here to make code consistent for both persistent and imperative
 graphs.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.ImperativeRangedCore`2">
<summary>
 Imperative GraphCore for directed graph (DiGraph) that uses AddrRange as key
 for each vertex, which is useful for managing CFGs of a binary.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.ImperativeCore`2">
<summary>
 Imperative GraphCore for directed graph (DiGraph).
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.ImpVertex`1.Succs(Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{`0}})">
<summary>
 List of successors.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.ImpVertex`1.Preds(Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{`0}})">
<summary>
 List of predecessors.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.ImpVertex`1.Succs">
<summary>
 List of successors.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.ImpVertex`1.Preds">
<summary>
 List of predecessors.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.ImpVertex`1">
<summary>
 Imperative vertex.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.PersistentRangedCore`2">
<summary>
 Persistent GraphCore for directed graph (DiGraph) that uses AddrRange as a
 key for each vertex. This is useful for handling CFGs of a binary.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.PersistentCore`2">
<summary>
 Persistent GraphCore for directed graph (DiGraph).
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.PerVertex`1">
<summary>
 Persistent vertex.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.DummyEntry.Connect``2(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},B2R2.MiddleEnd.BinGraph.Vertex{``0})">
<summary>
 Temporarily connect entry dummy node with the given root node. We do not
 touch the Graph, but simply connect two vertices temporarily for the
 convenience of analysis.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.DummyDataAccessException">
<summary>
 Trying to access dummy node&apos;s data
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.MultipleVerticesFoundException">
<summary>
 Multiple vertices found when looking for a vertex containing certain data
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.VertexNotFoundException">
<summary>
 Missing vertex.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.EdgeNotFoundException">
<summary>
 Missing edge.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.RangedDiGraph.init``2(``0,B2R2.MiddleEnd.BinGraph.GraphImplementationType)">
<summary>
 Initialize RangedDiGraph based on the implementation type.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.foldTopologically``3(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},``2}},``2)">
<summary>
 Topologically fold every vertex of the given graph. For every unreachable
 nodes, we accumulate vertices reachable from the node in a postorder
 fashion. The accumulated list becomes the reverse postordered vertices,
 which is essentially the same as a topologically sorted list of vertices.
 We then simply fold the accumulated list. The second parameter (root) is for
 providing root vertices in case there is no unreachable node, e.g., when
 there is a loop to the root node.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.iterRevPostorder``2(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},Microsoft.FSharp.Core.Unit})">
<summary>
 Iterate vertices of the graph in a depth-first manner with the reverse
 postorder traversal.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.foldRevPostorder``3(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},``2}},``2)">
<summary>
 Fold vertices of the graph in a depth-first manner with the reverse
 postorder traversal.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.iterPostorder``2(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},Microsoft.FSharp.Core.Unit})">
<summary>
 Iterate vertices of the graph in a depth-first manner with the postorder
 traversal.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.foldPostorder``3(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},``2}},``2)">
<summary>
 Fold vertices of the graph in a depth-first manner with the postorder
 traversal.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.iterPreorder``2(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},Microsoft.FSharp.Core.Unit})">
<summary>
 Iterate vertices of the graph in a depth-first manner with the preorder
 traversal.
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.Traversal.foldPreorder``3(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},Microsoft.FSharp.Collections.FSharpList{B2R2.MiddleEnd.BinGraph.Vertex{``0}},Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{B2R2.MiddleEnd.BinGraph.Vertex{``0},``2}},``2)">
<summary>
 Fold vertices of the graph in a depth-first manner with the preorder
 traversal.
</summary>
</member>
<member name="T:B2R2.MiddleEnd.BinGraph.Dominator.DominatorContext`2">
<summary>
 Storing DomInfo of a graph. We use this to repeatedly compute doms/pdoms of
 the same graph.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.MaxLength">
<summary>
 Length of the arrays.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.IDom">
<summary>
 DFNum -&gt; DFNum of an immediate dominator.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Size">
<summary>
 DFNum -&gt; Size
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Bucket">
<summary>
 DFNum -&gt; set of DFNums (vertices that share the same sdom).
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Semi">
<summary>
 DFNum -&gt; DFNum of a semidominator.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Ancestor">
<summary>
 DFNum -&gt; DFNum of an ancestor.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Child">
<summary>
 DFNum -&gt; DFNum of the child node (zero if not exists).
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Parent">
<summary>
 DFNum -&gt; DFNum of the parent node (zero if not exists).
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Label">
<summary>
 DFNum -&gt; DFNum in the ancestor chain s.t. DFNum of its Semi is minimal.
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.Vertex">
<summary>
 DFNum -&gt; Vertex
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.Dominator.DomInfo`1.DFNumMap">
<summary>
 Vertex ID -&gt; DFNum
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.SCC.SCCInfo`1.LowLink">
<summary>
 DFNum -&gt; LowLink
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.SCC.SCCInfo`1.Vertex">
<summary>
 DFNum -&gt; Vertex
</summary>
</member>
<member name="P:B2R2.MiddleEnd.BinGraph.SCC.SCCInfo`1.DFNumMap">
<summary>
 Vertex ID -&gt; DFNum
</summary>
</member>
<member name="M:B2R2.MiddleEnd.BinGraph.SCC.computeSCC``2(B2R2.MiddleEnd.BinGraph.DiGraph{``0,``1},B2R2.MiddleEnd.BinGraph.SCC.SCCInfo{``0},B2R2.MiddleEnd.BinGraph.Vertex{``0},System.Int32,Microsoft.FSharp.Collections.FSharpList{System.Int32},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpSet{B2R2.MiddleEnd.BinGraph.Vertex{``0}}})">
<summary>
 R.Tarjan. Depth-first search and linear graph algorithms
</summary>
</member>
</members>
</doc>
